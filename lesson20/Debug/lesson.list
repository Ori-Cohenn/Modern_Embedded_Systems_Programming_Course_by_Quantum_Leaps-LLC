
lesson.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001e4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800036c  08000374  00001374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800036c  0800036c  00001374  2**0
                  CONTENTS
  4 .ARM          00000000  0800036c  0800036c  00001374  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800036c  08000374  00001374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800036c  0800036c  0000136c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000370  08000370  00001370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001374  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001374  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000627  00000000  00000000  000013a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000243  00000000  00000000  000019cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c8  00000000  00000000  00001c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000087  00000000  00000000  00001cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000182a7  00000000  00000000  00001d5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000cf6  00000000  00000000  0001a006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008852b  00000000  00000000  0001acfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a3227  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000020c  00000000  00000000  000a326c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009d  00000000  00000000  000a3478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000354 	.word	0x08000354

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000354 	.word	0x08000354

080001c8 <SysTick_Handler>:
#include "stm32f4xx.h"
#include "bsp.h"

void SysTick_Handler(void) { //irq in cortexm4 header file (CMSIS)
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
//		GPIOD->ODR ^= (1U << LED_ORANGE_PIN);
    if (GPIOD->IDR & (1U << LED_ORANGE_PIN)) { // is LED_GREEN_PIN ON?
 80001cc:	4b09      	ldr	r3, [pc, #36]	@ (80001f4 <SysTick_Handler+0x2c>)
 80001ce:	691b      	ldr	r3, [r3, #16]
 80001d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d004      	beq.n	80001e2 <SysTick_Handler+0x1a>
        GPIOD->BSRR = (1U << (LED_ORANGE_PIN + 16U)); // turn LED_GREEN_PIN ON
 80001d8:	4b06      	ldr	r3, [pc, #24]	@ (80001f4 <SysTick_Handler+0x2c>)
 80001da:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80001de:	619a      	str	r2, [r3, #24]
    }
    else { // LED_GREEN_PIN is OFF
        GPIOD->BSRR = (1U << LED_ORANGE_PIN); // turn LED_GREEN_PIN on
    }
}
 80001e0:	e003      	b.n	80001ea <SysTick_Handler+0x22>
        GPIOD->BSRR = (1U << LED_ORANGE_PIN); // turn LED_GREEN_PIN on
 80001e2:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <SysTick_Handler+0x2c>)
 80001e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80001e8:	619a      	str	r2, [r3, #24]
}
 80001ea:	bf00      	nop
 80001ec:	46bd      	mov	sp, r7
 80001ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f2:	4770      	bx	lr
 80001f4:	40020c00 	.word	0x40020c00

080001f8 <BSP_init>:

void BSP_init(void) {
 80001f8:	b480      	push	{r7}
 80001fa:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN; // enable GPIOD clock port for the LEDs
 80001fc:	4b15      	ldr	r3, [pc, #84]	@ (8000254 <BSP_init+0x5c>)
 80001fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000200:	4a14      	ldr	r2, [pc, #80]	@ (8000254 <BSP_init+0x5c>)
 8000202:	f043 0308 	orr.w	r3, r3, #8
 8000206:	6313      	str	r3, [r2, #48]	@ 0x30
	// set the LED pins as push-pull output, no pull-up,medium speed, pull-down
	GPIOD->MODER = (GPIO_MODER_MODER12_0 | GPIO_MODER_MODER13_0
 8000208:	4b13      	ldr	r3, [pc, #76]	@ (8000258 <BSP_init+0x60>)
 800020a:	f04f 42aa 	mov.w	r2, #1426063360	@ 0x55000000
 800020e:	601a      	str	r2, [r3, #0]
			| GPIO_MODER_MODER14_0 | GPIO_MODER_MODER15_0); // Green LED, set pin 12 as output
	GPIOD->OTYPER &= ~((1U << LED_GREEN_PIN) | (1U << LED_RED_PIN)
 8000210:	4b11      	ldr	r3, [pc, #68]	@ (8000258 <BSP_init+0x60>)
 8000212:	685b      	ldr	r3, [r3, #4]
 8000214:	4a10      	ldr	r2, [pc, #64]	@ (8000258 <BSP_init+0x60>)
 8000216:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800021a:	6053      	str	r3, [r2, #4]
			| (1U << LED_ORANGE_PIN) | (1U << LED_BLUE_PIN));
	GPIOD->OSPEEDR |= ((1U << 2U * LED_GREEN_PIN) | (1U << 2U * LED_RED_PIN)
 800021c:	4b0e      	ldr	r3, [pc, #56]	@ (8000258 <BSP_init+0x60>)
 800021e:	689b      	ldr	r3, [r3, #8]
 8000220:	4a0d      	ldr	r2, [pc, #52]	@ (8000258 <BSP_init+0x60>)
 8000222:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 8000226:	6093      	str	r3, [r2, #8]
			| (1U << 2U * LED_ORANGE_PIN) | (1U << 2U * LED_BLUE_PIN));
	GPIOD->PUPDR &= ~((3U << 2U * LED_GREEN_PIN) | (3U << 2U * LED_RED_PIN)
 8000228:	4b0b      	ldr	r3, [pc, #44]	@ (8000258 <BSP_init+0x60>)
 800022a:	68db      	ldr	r3, [r3, #12]
 800022c:	4a0a      	ldr	r2, [pc, #40]	@ (8000258 <BSP_init+0x60>)
 800022e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8000232:	60d3      	str	r3, [r2, #12]
			| (3U << 2U * LED_ORANGE_PIN) | (3U << 2U * LED_BLUE_PIN));

	// configure the SysTick interrupt
	SysTick->LOAD = SYS_CLOCK_HZ / 2U - 1U; //divider 8M/16Mhz = 0.5 Second (count to to 8M in a 16Mhz timer)
 8000234:	4b09      	ldr	r3, [pc, #36]	@ (800025c <BSP_init+0x64>)
 8000236:	4a0a      	ldr	r2, [pc, #40]	@ (8000260 <BSP_init+0x68>)
 8000238:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0U;
 800023a:	4b08      	ldr	r3, [pc, #32]	@ (800025c <BSP_init+0x64>)
 800023c:	2200      	movs	r2, #0
 800023e:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = (1U << 2U) | (1U << 1U) | 1U;
 8000240:	4b06      	ldr	r3, [pc, #24]	@ (800025c <BSP_init+0x64>)
 8000242:	2207      	movs	r2, #7
 8000244:	601a      	str	r2, [r3, #0]
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000246:	b662      	cpsie	i
}
 8000248:	bf00      	nop
	__enable_irq();

}
 800024a:	bf00      	nop
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr
 8000254:	40023800 	.word	0x40023800
 8000258:	40020c00 	.word	0x40020c00
 800025c:	e000e010 	.word	0xe000e010
 8000260:	007fffff 	.word	0x007fffff

08000264 <BSP_delay>:
void BSP_ledBlueOff(void) {
	GPIOD->BSRR = (1U << (LED_BLUE_PIN + 16U));
}
//............................................................................

void BSP_delay(int volatile iter) {
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
	while (iter > 0) {  // delay loop
 800026c:	e002      	b.n	8000274 <BSP_delay+0x10>
		--iter;
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	3b01      	subs	r3, #1
 8000272:	607b      	str	r3, [r7, #4]
	while (iter > 0) {  // delay loop
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	2b00      	cmp	r3, #0
 8000278:	dcf9      	bgt.n	800026e <BSP_delay+0xa>
	}
}
 800027a:	bf00      	nop
 800027c:	bf00      	nop
 800027e:	370c      	adds	r7, #12
 8000280:	46bd      	mov	sp, r7
 8000282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000286:	4770      	bx	lr

08000288 <main>:
 one of the solution is Mutual Exclusion (MUTEX)
 */
#include "stm32f4xx.h"
#include "bsp.h"

int main() {
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	BSP_init();
 800028c:	f7ff ffb4 	bl	80001f8 <BSP_init>
//		GPIOD->ODR &= ~(1U << LED_GREEN_PIN);
//		BSP_delay(1000000);
//		__enable_irq();
//	}
	while (1) {
		GPIOD->BSRR = (1U << LED_GREEN_PIN); // atomic action
 8000290:	4b07      	ldr	r3, [pc, #28]	@ (80002b0 <main+0x28>)
 8000292:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000296:	619a      	str	r2, [r3, #24]
		BSP_delay(100000);
 8000298:	4806      	ldr	r0, [pc, #24]	@ (80002b4 <main+0x2c>)
 800029a:	f7ff ffe3 	bl	8000264 <BSP_delay>
		GPIOD->BSRR = (1U << (LED_GREEN_PIN + 16U));
 800029e:	4b04      	ldr	r3, [pc, #16]	@ (80002b0 <main+0x28>)
 80002a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80002a4:	619a      	str	r2, [r3, #24]
		BSP_delay(100000);
 80002a6:	4803      	ldr	r0, [pc, #12]	@ (80002b4 <main+0x2c>)
 80002a8:	f7ff ffdc 	bl	8000264 <BSP_delay>
		GPIOD->BSRR = (1U << LED_GREEN_PIN); // atomic action
 80002ac:	bf00      	nop
 80002ae:	e7ef      	b.n	8000290 <main+0x8>
 80002b0:	40020c00 	.word	0x40020c00
 80002b4:	000186a0 	.word	0x000186a0

080002b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002b8:	480d      	ldr	r0, [pc, #52]	@ (80002f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c0:	480c      	ldr	r0, [pc, #48]	@ (80002f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002c2:	490d      	ldr	r1, [pc, #52]	@ (80002f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c4:	4a0d      	ldr	r2, [pc, #52]	@ (80002fc <LoopForever+0xe>)
  movs r3, #0
 80002c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c8:	e002      	b.n	80002d0 <LoopCopyDataInit>

080002ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ce:	3304      	adds	r3, #4

080002d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d4:	d3f9      	bcc.n	80002ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000300 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002d8:	4c0a      	ldr	r4, [pc, #40]	@ (8000304 <LoopForever+0x16>)
  movs r3, #0
 80002da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002dc:	e001      	b.n	80002e2 <LoopFillZerobss>

080002de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e0:	3204      	adds	r2, #4

080002e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e4:	d3fb      	bcc.n	80002de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002e6:	f000 f811 	bl	800030c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ea:	f7ff ffcd 	bl	8000288 <main>

080002ee <LoopForever>:

LoopForever:
  b LoopForever
 80002ee:	e7fe      	b.n	80002ee <LoopForever>
  ldr   r0, =_estack
 80002f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002fc:	08000374 	.word	0x08000374
  ldr r2, =_sbss
 8000300:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000304:	2000001c 	.word	0x2000001c

08000308 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000308:	e7fe      	b.n	8000308 <ADC_IRQHandler>
	...

0800030c <__libc_init_array>:
 800030c:	b570      	push	{r4, r5, r6, lr}
 800030e:	4d0d      	ldr	r5, [pc, #52]	@ (8000344 <__libc_init_array+0x38>)
 8000310:	4c0d      	ldr	r4, [pc, #52]	@ (8000348 <__libc_init_array+0x3c>)
 8000312:	1b64      	subs	r4, r4, r5
 8000314:	10a4      	asrs	r4, r4, #2
 8000316:	2600      	movs	r6, #0
 8000318:	42a6      	cmp	r6, r4
 800031a:	d109      	bne.n	8000330 <__libc_init_array+0x24>
 800031c:	4d0b      	ldr	r5, [pc, #44]	@ (800034c <__libc_init_array+0x40>)
 800031e:	4c0c      	ldr	r4, [pc, #48]	@ (8000350 <__libc_init_array+0x44>)
 8000320:	f000 f818 	bl	8000354 <_init>
 8000324:	1b64      	subs	r4, r4, r5
 8000326:	10a4      	asrs	r4, r4, #2
 8000328:	2600      	movs	r6, #0
 800032a:	42a6      	cmp	r6, r4
 800032c:	d105      	bne.n	800033a <__libc_init_array+0x2e>
 800032e:	bd70      	pop	{r4, r5, r6, pc}
 8000330:	f855 3b04 	ldr.w	r3, [r5], #4
 8000334:	4798      	blx	r3
 8000336:	3601      	adds	r6, #1
 8000338:	e7ee      	b.n	8000318 <__libc_init_array+0xc>
 800033a:	f855 3b04 	ldr.w	r3, [r5], #4
 800033e:	4798      	blx	r3
 8000340:	3601      	adds	r6, #1
 8000342:	e7f2      	b.n	800032a <__libc_init_array+0x1e>
 8000344:	0800036c 	.word	0x0800036c
 8000348:	0800036c 	.word	0x0800036c
 800034c:	0800036c 	.word	0x0800036c
 8000350:	08000370 	.word	0x08000370

08000354 <_init>:
 8000354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000356:	bf00      	nop
 8000358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800035a:	bc08      	pop	{r3}
 800035c:	469e      	mov	lr, r3
 800035e:	4770      	bx	lr

08000360 <_fini>:
 8000360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000362:	bf00      	nop
 8000364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000366:	bc08      	pop	{r3}
 8000368:	469e      	mov	lr, r3
 800036a:	4770      	bx	lr
