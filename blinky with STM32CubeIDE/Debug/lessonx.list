
lessonx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b94  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003d1c  08003d1c  00004d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d2c  08003d2c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d2c  08003d2c  00004d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d34  08003d34  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d34  08003d34  00004d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d38  08003d38  00004d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003d3c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          00000400  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000040c  2000040c  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b46d  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fd4  00000000  00000000  000104a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008c0  00000000  00000000  00012480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000067a  00000000  00000000  00012d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020b44  00000000  00000000  000133ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b301  00000000  00000000  00033efe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8de6  00000000  00000000  0003f1ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00107fe5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000235c  00000000  00000000  00108028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a2  00000000  00000000  0010a384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003d04 	.word	0x08003d04

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003d04 	.word	0x08003d04

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fa22 	bl	8000904 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f810 	bl	80004e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f87a 	bl	80005bc <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	HAL_Delay(500);
 80004c8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80004cc:	f000 fa8c 	bl	80009e8 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_13);
 80004d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004d4:	4802      	ldr	r0, [pc, #8]	@ (80004e0 <main+0x28>)
 80004d6:	f000 fd46 	bl	8000f66 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 80004da:	bf00      	nop
 80004dc:	e7f4      	b.n	80004c8 <main+0x10>
 80004de:	bf00      	nop
 80004e0:	40020c00 	.word	0x40020c00

080004e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b094      	sub	sp, #80	@ 0x50
 80004e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ea:	f107 0320 	add.w	r3, r7, #32
 80004ee:	2230      	movs	r2, #48	@ 0x30
 80004f0:	2100      	movs	r1, #0
 80004f2:	4618      	mov	r0, r3
 80004f4:	f003 fbda 	bl	8003cac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f8:	f107 030c 	add.w	r3, r7, #12
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	605a      	str	r2, [r3, #4]
 8000502:	609a      	str	r2, [r3, #8]
 8000504:	60da      	str	r2, [r3, #12]
 8000506:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000508:	2300      	movs	r3, #0
 800050a:	60bb      	str	r3, [r7, #8]
 800050c:	4b29      	ldr	r3, [pc, #164]	@ (80005b4 <SystemClock_Config+0xd0>)
 800050e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000510:	4a28      	ldr	r2, [pc, #160]	@ (80005b4 <SystemClock_Config+0xd0>)
 8000512:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000516:	6413      	str	r3, [r2, #64]	@ 0x40
 8000518:	4b26      	ldr	r3, [pc, #152]	@ (80005b4 <SystemClock_Config+0xd0>)
 800051a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800051c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000524:	2300      	movs	r3, #0
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	4b23      	ldr	r3, [pc, #140]	@ (80005b8 <SystemClock_Config+0xd4>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a22      	ldr	r2, [pc, #136]	@ (80005b8 <SystemClock_Config+0xd4>)
 800052e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000532:	6013      	str	r3, [r2, #0]
 8000534:	4b20      	ldr	r3, [pc, #128]	@ (80005b8 <SystemClock_Config+0xd4>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000540:	2301      	movs	r3, #1
 8000542:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000544:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000548:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800054a:	2302      	movs	r3, #2
 800054c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800054e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000552:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000554:	2308      	movs	r3, #8
 8000556:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000558:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800055c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800055e:	2302      	movs	r3, #2
 8000560:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000562:	2307      	movs	r3, #7
 8000564:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000566:	f107 0320 	add.w	r3, r7, #32
 800056a:	4618      	mov	r0, r3
 800056c:	f002 fabc 	bl	8002ae8 <HAL_RCC_OscConfig>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000576:	f000 f91f 	bl	80007b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057a:	230f      	movs	r3, #15
 800057c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800057e:	2302      	movs	r3, #2
 8000580:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000582:	2300      	movs	r3, #0
 8000584:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000586:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800058a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800058c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000590:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000592:	f107 030c 	add.w	r3, r7, #12
 8000596:	2105      	movs	r1, #5
 8000598:	4618      	mov	r0, r3
 800059a:	f002 fd1d 	bl	8002fd8 <HAL_RCC_ClockConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005a4:	f000 f908 	bl	80007b8 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80005a8:	f002 fdfc 	bl	80031a4 <HAL_RCC_EnableCSS>
}
 80005ac:	bf00      	nop
 80005ae:	3750      	adds	r7, #80	@ 0x50
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40023800 	.word	0x40023800
 80005b8:	40007000 	.word	0x40007000

080005bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08c      	sub	sp, #48	@ 0x30
 80005c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c2:	f107 031c 	add.w	r3, r7, #28
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	61bb      	str	r3, [r7, #24]
 80005d6:	4b72      	ldr	r3, [pc, #456]	@ (80007a0 <MX_GPIO_Init+0x1e4>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	4a71      	ldr	r2, [pc, #452]	@ (80007a0 <MX_GPIO_Init+0x1e4>)
 80005dc:	f043 0310 	orr.w	r3, r3, #16
 80005e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e2:	4b6f      	ldr	r3, [pc, #444]	@ (80007a0 <MX_GPIO_Init+0x1e4>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	f003 0310 	and.w	r3, r3, #16
 80005ea:	61bb      	str	r3, [r7, #24]
 80005ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	617b      	str	r3, [r7, #20]
 80005f2:	4b6b      	ldr	r3, [pc, #428]	@ (80007a0 <MX_GPIO_Init+0x1e4>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	4a6a      	ldr	r2, [pc, #424]	@ (80007a0 <MX_GPIO_Init+0x1e4>)
 80005f8:	f043 0304 	orr.w	r3, r3, #4
 80005fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fe:	4b68      	ldr	r3, [pc, #416]	@ (80007a0 <MX_GPIO_Init+0x1e4>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	f003 0304 	and.w	r3, r3, #4
 8000606:	617b      	str	r3, [r7, #20]
 8000608:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	613b      	str	r3, [r7, #16]
 800060e:	4b64      	ldr	r3, [pc, #400]	@ (80007a0 <MX_GPIO_Init+0x1e4>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	4a63      	ldr	r2, [pc, #396]	@ (80007a0 <MX_GPIO_Init+0x1e4>)
 8000614:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000618:	6313      	str	r3, [r2, #48]	@ 0x30
 800061a:	4b61      	ldr	r3, [pc, #388]	@ (80007a0 <MX_GPIO_Init+0x1e4>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000622:	613b      	str	r3, [r7, #16]
 8000624:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	60fb      	str	r3, [r7, #12]
 800062a:	4b5d      	ldr	r3, [pc, #372]	@ (80007a0 <MX_GPIO_Init+0x1e4>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	4a5c      	ldr	r2, [pc, #368]	@ (80007a0 <MX_GPIO_Init+0x1e4>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6313      	str	r3, [r2, #48]	@ 0x30
 8000636:	4b5a      	ldr	r3, [pc, #360]	@ (80007a0 <MX_GPIO_Init+0x1e4>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	4b56      	ldr	r3, [pc, #344]	@ (80007a0 <MX_GPIO_Init+0x1e4>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	4a55      	ldr	r2, [pc, #340]	@ (80007a0 <MX_GPIO_Init+0x1e4>)
 800064c:	f043 0302 	orr.w	r3, r3, #2
 8000650:	6313      	str	r3, [r2, #48]	@ 0x30
 8000652:	4b53      	ldr	r3, [pc, #332]	@ (80007a0 <MX_GPIO_Init+0x1e4>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	f003 0302 	and.w	r3, r3, #2
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	4b4f      	ldr	r3, [pc, #316]	@ (80007a0 <MX_GPIO_Init+0x1e4>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	4a4e      	ldr	r2, [pc, #312]	@ (80007a0 <MX_GPIO_Init+0x1e4>)
 8000668:	f043 0308 	orr.w	r3, r3, #8
 800066c:	6313      	str	r3, [r2, #48]	@ 0x30
 800066e:	4b4c      	ldr	r3, [pc, #304]	@ (80007a0 <MX_GPIO_Init+0x1e4>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	f003 0308 	and.w	r3, r3, #8
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	2108      	movs	r1, #8
 800067e:	4849      	ldr	r0, [pc, #292]	@ (80007a4 <MX_GPIO_Init+0x1e8>)
 8000680:	f000 fc58 	bl	8000f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000684:	2201      	movs	r2, #1
 8000686:	2101      	movs	r1, #1
 8000688:	4847      	ldr	r0, [pc, #284]	@ (80007a8 <MX_GPIO_Init+0x1ec>)
 800068a:	f000 fc53 	bl	8000f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|GPIO_PIN_13|LD5_Pin|LD6_Pin
 800068e:	2200      	movs	r2, #0
 8000690:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000694:	4845      	ldr	r0, [pc, #276]	@ (80007ac <MX_GPIO_Init+0x1f0>)
 8000696:	f000 fc4d 	bl	8000f34 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800069a:	2308      	movs	r3, #8
 800069c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069e:	2301      	movs	r3, #1
 80006a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a6:	2300      	movs	r3, #0
 80006a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80006aa:	f107 031c 	add.w	r3, r7, #28
 80006ae:	4619      	mov	r1, r3
 80006b0:	483c      	ldr	r0, [pc, #240]	@ (80007a4 <MX_GPIO_Init+0x1e8>)
 80006b2:	f000 faa3 	bl	8000bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80006b6:	2301      	movs	r3, #1
 80006b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ba:	2301      	movs	r3, #1
 80006bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c2:	2300      	movs	r3, #0
 80006c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006c6:	f107 031c 	add.w	r3, r7, #28
 80006ca:	4619      	mov	r1, r3
 80006cc:	4836      	ldr	r0, [pc, #216]	@ (80007a8 <MX_GPIO_Init+0x1ec>)
 80006ce:	f000 fa95 	bl	8000bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80006d2:	2308      	movs	r3, #8
 80006d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d6:	2302      	movs	r3, #2
 80006d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006de:	2300      	movs	r3, #0
 80006e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006e2:	2305      	movs	r3, #5
 80006e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	4619      	mov	r1, r3
 80006ec:	482e      	ldr	r0, [pc, #184]	@ (80007a8 <MX_GPIO_Init+0x1ec>)
 80006ee:	f000 fa85 	bl	8000bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006f2:	2301      	movs	r3, #1
 80006f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006f6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80006fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000700:	f107 031c 	add.w	r3, r7, #28
 8000704:	4619      	mov	r1, r3
 8000706:	482a      	ldr	r0, [pc, #168]	@ (80007b0 <MX_GPIO_Init+0x1f4>)
 8000708:	f000 fa78 	bl	8000bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800070c:	2304      	movs	r3, #4
 800070e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000710:	2300      	movs	r3, #0
 8000712:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000718:	f107 031c 	add.w	r3, r7, #28
 800071c:	4619      	mov	r1, r3
 800071e:	4825      	ldr	r0, [pc, #148]	@ (80007b4 <MX_GPIO_Init+0x1f8>)
 8000720:	f000 fa6c 	bl	8000bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000724:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000728:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072a:	2302      	movs	r3, #2
 800072c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000732:	2300      	movs	r3, #0
 8000734:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000736:	2305      	movs	r3, #5
 8000738:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	4619      	mov	r1, r3
 8000740:	481c      	ldr	r0, [pc, #112]	@ (80007b4 <MX_GPIO_Init+0x1f8>)
 8000742:	f000 fa5b 	bl	8000bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin PD13 LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|GPIO_PIN_13|LD5_Pin|LD6_Pin
 8000746:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800074a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074c:	2301      	movs	r3, #1
 800074e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000754:	2300      	movs	r3, #0
 8000756:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000758:	f107 031c 	add.w	r3, r7, #28
 800075c:	4619      	mov	r1, r3
 800075e:	4813      	ldr	r0, [pc, #76]	@ (80007ac <MX_GPIO_Init+0x1f0>)
 8000760:	f000 fa4c 	bl	8000bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000764:	2320      	movs	r3, #32
 8000766:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000768:	2300      	movs	r3, #0
 800076a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000770:	f107 031c 	add.w	r3, r7, #28
 8000774:	4619      	mov	r1, r3
 8000776:	480d      	ldr	r0, [pc, #52]	@ (80007ac <MX_GPIO_Init+0x1f0>)
 8000778:	f000 fa40 	bl	8000bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800077c:	2302      	movs	r3, #2
 800077e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000780:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000784:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	4619      	mov	r1, r3
 8000790:	4804      	ldr	r0, [pc, #16]	@ (80007a4 <MX_GPIO_Init+0x1e8>)
 8000792:	f000 fa33 	bl	8000bfc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000796:	bf00      	nop
 8000798:	3730      	adds	r7, #48	@ 0x30
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40021000 	.word	0x40021000
 80007a8:	40020800 	.word	0x40020800
 80007ac:	40020c00 	.word	0x40020c00
 80007b0:	40020000 	.word	0x40020000
 80007b4:	40020400 	.word	0x40020400

080007b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007bc:	b672      	cpsid	i
}
 80007be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c0:	bf00      	nop
 80007c2:	e7fd      	b.n	80007c0 <Error_Handler+0x8>

080007c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b10      	ldr	r3, [pc, #64]	@ (8000810 <HAL_MspInit+0x4c>)
 80007d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000810 <HAL_MspInit+0x4c>)
 80007d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80007da:	4b0d      	ldr	r3, [pc, #52]	@ (8000810 <HAL_MspInit+0x4c>)
 80007dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	4b09      	ldr	r3, [pc, #36]	@ (8000810 <HAL_MspInit+0x4c>)
 80007ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ee:	4a08      	ldr	r2, [pc, #32]	@ (8000810 <HAL_MspInit+0x4c>)
 80007f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80007f6:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <HAL_MspInit+0x4c>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000802:	2007      	movs	r0, #7
 8000804:	f000 f9c6 	bl	8000b94 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40023800 	.word	0x40023800

08000814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000818:	f002 fdd6 	bl	80033c8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800081c:	bf00      	nop
 800081e:	e7fd      	b.n	800081c <NMI_Handler+0x8>

08000820 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <HardFault_Handler+0x4>

08000828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <MemManage_Handler+0x4>

08000830 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <BusFault_Handler+0x4>

08000838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800083c:	bf00      	nop
 800083e:	e7fd      	b.n	800083c <UsageFault_Handler+0x4>

08000840 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr

0800084e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800086e:	f000 f89b 	bl	80009a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
	...

08000878 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800087c:	4802      	ldr	r0, [pc, #8]	@ (8000888 <OTG_FS_IRQHandler+0x10>)
 800087e:	f000 fb8c 	bl	8000f9a <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	2000002c 	.word	0x2000002c

0800088c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000890:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <SystemInit+0x20>)
 8000892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000896:	4a05      	ldr	r2, [pc, #20]	@ (80008ac <SystemInit+0x20>)
 8000898:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800089c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80008b4:	f7ff ffea 	bl	800088c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008b8:	480c      	ldr	r0, [pc, #48]	@ (80008ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008ba:	490d      	ldr	r1, [pc, #52]	@ (80008f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008bc:	4a0d      	ldr	r2, [pc, #52]	@ (80008f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c0:	e002      	b.n	80008c8 <LoopCopyDataInit>

080008c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c6:	3304      	adds	r3, #4

080008c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008cc:	d3f9      	bcc.n	80008c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ce:	4a0a      	ldr	r2, [pc, #40]	@ (80008f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008d0:	4c0a      	ldr	r4, [pc, #40]	@ (80008fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80008d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d4:	e001      	b.n	80008da <LoopFillZerobss>

080008d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d8:	3204      	adds	r2, #4

080008da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008dc:	d3fb      	bcc.n	80008d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008de:	f003 f9ed 	bl	8003cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008e2:	f7ff fde9 	bl	80004b8 <main>
  bx  lr    
 80008e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008f4:	08003d3c 	.word	0x08003d3c
  ldr r2, =_sbss
 80008f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008fc:	2000040c 	.word	0x2000040c

08000900 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000900:	e7fe      	b.n	8000900 <ADC_IRQHandler>
	...

08000904 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000908:	4b0e      	ldr	r3, [pc, #56]	@ (8000944 <HAL_Init+0x40>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a0d      	ldr	r2, [pc, #52]	@ (8000944 <HAL_Init+0x40>)
 800090e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000912:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000914:	4b0b      	ldr	r3, [pc, #44]	@ (8000944 <HAL_Init+0x40>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a0a      	ldr	r2, [pc, #40]	@ (8000944 <HAL_Init+0x40>)
 800091a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800091e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000920:	4b08      	ldr	r3, [pc, #32]	@ (8000944 <HAL_Init+0x40>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a07      	ldr	r2, [pc, #28]	@ (8000944 <HAL_Init+0x40>)
 8000926:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800092a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800092c:	2003      	movs	r0, #3
 800092e:	f000 f931 	bl	8000b94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000932:	2000      	movs	r0, #0
 8000934:	f000 f808 	bl	8000948 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000938:	f7ff ff44 	bl	80007c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800093c:	2300      	movs	r3, #0
}
 800093e:	4618      	mov	r0, r3
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40023c00 	.word	0x40023c00

08000948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000950:	4b12      	ldr	r3, [pc, #72]	@ (800099c <HAL_InitTick+0x54>)
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	4b12      	ldr	r3, [pc, #72]	@ (80009a0 <HAL_InitTick+0x58>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	4619      	mov	r1, r3
 800095a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800095e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000962:	fbb2 f3f3 	udiv	r3, r2, r3
 8000966:	4618      	mov	r0, r3
 8000968:	f000 f93b 	bl	8000be2 <HAL_SYSTICK_Config>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000972:	2301      	movs	r3, #1
 8000974:	e00e      	b.n	8000994 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2b0f      	cmp	r3, #15
 800097a:	d80a      	bhi.n	8000992 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800097c:	2200      	movs	r2, #0
 800097e:	6879      	ldr	r1, [r7, #4]
 8000980:	f04f 30ff 	mov.w	r0, #4294967295
 8000984:	f000 f911 	bl	8000baa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000988:	4a06      	ldr	r2, [pc, #24]	@ (80009a4 <HAL_InitTick+0x5c>)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800098e:	2300      	movs	r3, #0
 8000990:	e000      	b.n	8000994 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000992:	2301      	movs	r3, #1
}
 8000994:	4618      	mov	r0, r3
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20000000 	.word	0x20000000
 80009a0:	20000008 	.word	0x20000008
 80009a4:	20000004 	.word	0x20000004

080009a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009ac:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <HAL_IncTick+0x20>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <HAL_IncTick+0x24>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4413      	add	r3, r2
 80009b8:	4a04      	ldr	r2, [pc, #16]	@ (80009cc <HAL_IncTick+0x24>)
 80009ba:	6013      	str	r3, [r2, #0]
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	20000008 	.word	0x20000008
 80009cc:	20000028 	.word	0x20000028

080009d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  return uwTick;
 80009d4:	4b03      	ldr	r3, [pc, #12]	@ (80009e4 <HAL_GetTick+0x14>)
 80009d6:	681b      	ldr	r3, [r3, #0]
}
 80009d8:	4618      	mov	r0, r3
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	20000028 	.word	0x20000028

080009e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009f0:	f7ff ffee 	bl	80009d0 <HAL_GetTick>
 80009f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a00:	d005      	beq.n	8000a0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a02:	4b0a      	ldr	r3, [pc, #40]	@ (8000a2c <HAL_Delay+0x44>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	461a      	mov	r2, r3
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a0e:	bf00      	nop
 8000a10:	f7ff ffde 	bl	80009d0 <HAL_GetTick>
 8000a14:	4602      	mov	r2, r0
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	68fa      	ldr	r2, [r7, #12]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d8f7      	bhi.n	8000a10 <HAL_Delay+0x28>
  {
  }
}
 8000a20:	bf00      	nop
 8000a22:	bf00      	nop
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000008 	.word	0x20000008

08000a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f003 0307 	and.w	r3, r3, #7
 8000a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a40:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <__NVIC_SetPriorityGrouping+0x44>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a46:	68ba      	ldr	r2, [r7, #8]
 8000a48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a62:	4a04      	ldr	r2, [pc, #16]	@ (8000a74 <__NVIC_SetPriorityGrouping+0x44>)
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	60d3      	str	r3, [r2, #12]
}
 8000a68:	bf00      	nop
 8000a6a:	3714      	adds	r7, #20
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a7c:	4b04      	ldr	r3, [pc, #16]	@ (8000a90 <__NVIC_GetPriorityGrouping+0x18>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	0a1b      	lsrs	r3, r3, #8
 8000a82:	f003 0307 	and.w	r3, r3, #7
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	6039      	str	r1, [r7, #0]
 8000a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	db0a      	blt.n	8000abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	490c      	ldr	r1, [pc, #48]	@ (8000ae0 <__NVIC_SetPriority+0x4c>)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	0112      	lsls	r2, r2, #4
 8000ab4:	b2d2      	uxtb	r2, r2
 8000ab6:	440b      	add	r3, r1
 8000ab8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000abc:	e00a      	b.n	8000ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	4908      	ldr	r1, [pc, #32]	@ (8000ae4 <__NVIC_SetPriority+0x50>)
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	f003 030f 	and.w	r3, r3, #15
 8000aca:	3b04      	subs	r3, #4
 8000acc:	0112      	lsls	r2, r2, #4
 8000ace:	b2d2      	uxtb	r2, r2
 8000ad0:	440b      	add	r3, r1
 8000ad2:	761a      	strb	r2, [r3, #24]
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000e100 	.word	0xe000e100
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b089      	sub	sp, #36	@ 0x24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f003 0307 	and.w	r3, r3, #7
 8000afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	f1c3 0307 	rsb	r3, r3, #7
 8000b02:	2b04      	cmp	r3, #4
 8000b04:	bf28      	it	cs
 8000b06:	2304      	movcs	r3, #4
 8000b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	3304      	adds	r3, #4
 8000b0e:	2b06      	cmp	r3, #6
 8000b10:	d902      	bls.n	8000b18 <NVIC_EncodePriority+0x30>
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	3b03      	subs	r3, #3
 8000b16:	e000      	b.n	8000b1a <NVIC_EncodePriority+0x32>
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	43da      	mvns	r2, r3
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	401a      	ands	r2, r3
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b30:	f04f 31ff 	mov.w	r1, #4294967295
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3a:	43d9      	mvns	r1, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b40:	4313      	orrs	r3, r2
         );
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3724      	adds	r7, #36	@ 0x24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
	...

08000b50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b60:	d301      	bcc.n	8000b66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b62:	2301      	movs	r3, #1
 8000b64:	e00f      	b.n	8000b86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b66:	4a0a      	ldr	r2, [pc, #40]	@ (8000b90 <SysTick_Config+0x40>)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b6e:	210f      	movs	r1, #15
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	f7ff ff8e 	bl	8000a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b78:	4b05      	ldr	r3, [pc, #20]	@ (8000b90 <SysTick_Config+0x40>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b7e:	4b04      	ldr	r3, [pc, #16]	@ (8000b90 <SysTick_Config+0x40>)
 8000b80:	2207      	movs	r2, #7
 8000b82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	e000e010 	.word	0xe000e010

08000b94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f7ff ff47 	bl	8000a30 <__NVIC_SetPriorityGrouping>
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b086      	sub	sp, #24
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	60b9      	str	r1, [r7, #8]
 8000bb4:	607a      	str	r2, [r7, #4]
 8000bb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bbc:	f7ff ff5c 	bl	8000a78 <__NVIC_GetPriorityGrouping>
 8000bc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	68b9      	ldr	r1, [r7, #8]
 8000bc6:	6978      	ldr	r0, [r7, #20]
 8000bc8:	f7ff ff8e 	bl	8000ae8 <NVIC_EncodePriority>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bd2:	4611      	mov	r1, r2
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff ff5d 	bl	8000a94 <__NVIC_SetPriority>
}
 8000bda:	bf00      	nop
 8000bdc:	3718      	adds	r7, #24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b082      	sub	sp, #8
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff ffb0 	bl	8000b50 <SysTick_Config>
 8000bf0:	4603      	mov	r3, r0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b089      	sub	sp, #36	@ 0x24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c12:	2300      	movs	r3, #0
 8000c14:	61fb      	str	r3, [r7, #28]
 8000c16:	e16b      	b.n	8000ef0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c18:	2201      	movs	r2, #1
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	697a      	ldr	r2, [r7, #20]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f040 815a 	bne.w	8000eea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f003 0303 	and.w	r3, r3, #3
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d005      	beq.n	8000c4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	d130      	bne.n	8000cb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	2203      	movs	r2, #3
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	4013      	ands	r3, r2
 8000c64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	68da      	ldr	r2, [r3, #12]
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	69ba      	ldr	r2, [r7, #24]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c84:	2201      	movs	r2, #1
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	69ba      	ldr	r2, [r7, #24]
 8000c90:	4013      	ands	r3, r2
 8000c92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	091b      	lsrs	r3, r3, #4
 8000c9a:	f003 0201 	and.w	r2, r3, #1
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f003 0303 	and.w	r3, r3, #3
 8000cb8:	2b03      	cmp	r3, #3
 8000cba:	d017      	beq.n	8000cec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	2203      	movs	r2, #3
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	69ba      	ldr	r2, [r7, #24]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	689a      	ldr	r2, [r3, #8]
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f003 0303 	and.w	r3, r3, #3
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d123      	bne.n	8000d40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	08da      	lsrs	r2, r3, #3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3208      	adds	r2, #8
 8000d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	f003 0307 	and.w	r3, r3, #7
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	220f      	movs	r2, #15
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	43db      	mvns	r3, r3
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	691a      	ldr	r2, [r3, #16]
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	08da      	lsrs	r2, r3, #3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	3208      	adds	r2, #8
 8000d3a:	69b9      	ldr	r1, [r7, #24]
 8000d3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	2203      	movs	r2, #3
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	4013      	ands	r3, r2
 8000d56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f003 0203 	and.w	r2, r3, #3
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	f000 80b4 	beq.w	8000eea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	4b60      	ldr	r3, [pc, #384]	@ (8000f08 <HAL_GPIO_Init+0x30c>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d8a:	4a5f      	ldr	r2, [pc, #380]	@ (8000f08 <HAL_GPIO_Init+0x30c>)
 8000d8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d92:	4b5d      	ldr	r3, [pc, #372]	@ (8000f08 <HAL_GPIO_Init+0x30c>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d9e:	4a5b      	ldr	r2, [pc, #364]	@ (8000f0c <HAL_GPIO_Init+0x310>)
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	089b      	lsrs	r3, r3, #2
 8000da4:	3302      	adds	r3, #2
 8000da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	f003 0303 	and.w	r3, r3, #3
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	220f      	movs	r2, #15
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a52      	ldr	r2, [pc, #328]	@ (8000f10 <HAL_GPIO_Init+0x314>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d02b      	beq.n	8000e22 <HAL_GPIO_Init+0x226>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a51      	ldr	r2, [pc, #324]	@ (8000f14 <HAL_GPIO_Init+0x318>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d025      	beq.n	8000e1e <HAL_GPIO_Init+0x222>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a50      	ldr	r2, [pc, #320]	@ (8000f18 <HAL_GPIO_Init+0x31c>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d01f      	beq.n	8000e1a <HAL_GPIO_Init+0x21e>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a4f      	ldr	r2, [pc, #316]	@ (8000f1c <HAL_GPIO_Init+0x320>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d019      	beq.n	8000e16 <HAL_GPIO_Init+0x21a>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a4e      	ldr	r2, [pc, #312]	@ (8000f20 <HAL_GPIO_Init+0x324>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d013      	beq.n	8000e12 <HAL_GPIO_Init+0x216>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a4d      	ldr	r2, [pc, #308]	@ (8000f24 <HAL_GPIO_Init+0x328>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d00d      	beq.n	8000e0e <HAL_GPIO_Init+0x212>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a4c      	ldr	r2, [pc, #304]	@ (8000f28 <HAL_GPIO_Init+0x32c>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d007      	beq.n	8000e0a <HAL_GPIO_Init+0x20e>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a4b      	ldr	r2, [pc, #300]	@ (8000f2c <HAL_GPIO_Init+0x330>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d101      	bne.n	8000e06 <HAL_GPIO_Init+0x20a>
 8000e02:	2307      	movs	r3, #7
 8000e04:	e00e      	b.n	8000e24 <HAL_GPIO_Init+0x228>
 8000e06:	2308      	movs	r3, #8
 8000e08:	e00c      	b.n	8000e24 <HAL_GPIO_Init+0x228>
 8000e0a:	2306      	movs	r3, #6
 8000e0c:	e00a      	b.n	8000e24 <HAL_GPIO_Init+0x228>
 8000e0e:	2305      	movs	r3, #5
 8000e10:	e008      	b.n	8000e24 <HAL_GPIO_Init+0x228>
 8000e12:	2304      	movs	r3, #4
 8000e14:	e006      	b.n	8000e24 <HAL_GPIO_Init+0x228>
 8000e16:	2303      	movs	r3, #3
 8000e18:	e004      	b.n	8000e24 <HAL_GPIO_Init+0x228>
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	e002      	b.n	8000e24 <HAL_GPIO_Init+0x228>
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e000      	b.n	8000e24 <HAL_GPIO_Init+0x228>
 8000e22:	2300      	movs	r3, #0
 8000e24:	69fa      	ldr	r2, [r7, #28]
 8000e26:	f002 0203 	and.w	r2, r2, #3
 8000e2a:	0092      	lsls	r2, r2, #2
 8000e2c:	4093      	lsls	r3, r2
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e34:	4935      	ldr	r1, [pc, #212]	@ (8000f0c <HAL_GPIO_Init+0x310>)
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	089b      	lsrs	r3, r3, #2
 8000e3a:	3302      	adds	r3, #2
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e42:	4b3b      	ldr	r3, [pc, #236]	@ (8000f30 <HAL_GPIO_Init+0x334>)
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d003      	beq.n	8000e66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e66:	4a32      	ldr	r2, [pc, #200]	@ (8000f30 <HAL_GPIO_Init+0x334>)
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e6c:	4b30      	ldr	r3, [pc, #192]	@ (8000f30 <HAL_GPIO_Init+0x334>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	43db      	mvns	r3, r3
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d003      	beq.n	8000e90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e90:	4a27      	ldr	r2, [pc, #156]	@ (8000f30 <HAL_GPIO_Init+0x334>)
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e96:	4b26      	ldr	r3, [pc, #152]	@ (8000f30 <HAL_GPIO_Init+0x334>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d003      	beq.n	8000eba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000eba:	4a1d      	ldr	r2, [pc, #116]	@ (8000f30 <HAL_GPIO_Init+0x334>)
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ec0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f30 <HAL_GPIO_Init+0x334>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d003      	beq.n	8000ee4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ee4:	4a12      	ldr	r2, [pc, #72]	@ (8000f30 <HAL_GPIO_Init+0x334>)
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3301      	adds	r3, #1
 8000eee:	61fb      	str	r3, [r7, #28]
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	2b0f      	cmp	r3, #15
 8000ef4:	f67f ae90 	bls.w	8000c18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ef8:	bf00      	nop
 8000efa:	bf00      	nop
 8000efc:	3724      	adds	r7, #36	@ 0x24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40013800 	.word	0x40013800
 8000f10:	40020000 	.word	0x40020000
 8000f14:	40020400 	.word	0x40020400
 8000f18:	40020800 	.word	0x40020800
 8000f1c:	40020c00 	.word	0x40020c00
 8000f20:	40021000 	.word	0x40021000
 8000f24:	40021400 	.word	0x40021400
 8000f28:	40021800 	.word	0x40021800
 8000f2c:	40021c00 	.word	0x40021c00
 8000f30:	40013c00 	.word	0x40013c00

08000f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	807b      	strh	r3, [r7, #2]
 8000f40:	4613      	mov	r3, r2
 8000f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f44:	787b      	ldrb	r3, [r7, #1]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d003      	beq.n	8000f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f4a:	887a      	ldrh	r2, [r7, #2]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f50:	e003      	b.n	8000f5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f52:	887b      	ldrh	r3, [r7, #2]
 8000f54:	041a      	lsls	r2, r3, #16
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	619a      	str	r2, [r3, #24]
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b085      	sub	sp, #20
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
 8000f6e:	460b      	mov	r3, r1
 8000f70:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f78:	887a      	ldrh	r2, [r7, #2]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	041a      	lsls	r2, r3, #16
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	43d9      	mvns	r1, r3
 8000f84:	887b      	ldrh	r3, [r7, #2]
 8000f86:	400b      	ands	r3, r1
 8000f88:	431a      	orrs	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	619a      	str	r2, [r3, #24]
}
 8000f8e:	bf00      	nop
 8000f90:	3714      	adds	r7, #20
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b086      	sub	sp, #24
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f002 fb32 	bl	800361a <USB_GetMode>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	f040 80fb 	bne.w	80011b4 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f002 faf5 	bl	80035b2 <USB_ReadInterrupts>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	f000 80f1 	beq.w	80011b2 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f002 faec 	bl	80035b2 <USB_ReadInterrupts>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fe0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8000fe4:	d104      	bne.n	8000ff0 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000fee:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f002 fadc 	bl	80035b2 <USB_ReadInterrupts>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001000:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001004:	d104      	bne.n	8001010 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800100e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4618      	mov	r0, r3
 8001016:	f002 facc 	bl	80035b2 <USB_ReadInterrupts>
 800101a:	4603      	mov	r3, r0
 800101c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001020:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001024:	d104      	bne.n	8001030 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800102e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4618      	mov	r0, r3
 8001036:	f002 fabc 	bl	80035b2 <USB_ReadInterrupts>
 800103a:	4603      	mov	r3, r0
 800103c:	f003 0302 	and.w	r3, r3, #2
 8001040:	2b02      	cmp	r3, #2
 8001042:	d103      	bne.n	800104c <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2202      	movs	r2, #2
 800104a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4618      	mov	r0, r3
 8001052:	f002 faae 	bl	80035b2 <USB_ReadInterrupts>
 8001056:	4603      	mov	r3, r0
 8001058:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800105c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001060:	d120      	bne.n	80010a4 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800106a:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0301 	and.w	r3, r3, #1
 8001078:	2b00      	cmp	r3, #0
 800107a:	d113      	bne.n	80010a4 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800107c:	2110      	movs	r1, #16
 800107e:	6938      	ldr	r0, [r7, #16]
 8001080:	f002 f9df 	bl	8003442 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001084:	6938      	ldr	r0, [r7, #16]
 8001086:	f002 fa0e 	bl	80034a6 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	7a5b      	ldrb	r3, [r3, #9]
 800108e:	2b02      	cmp	r3, #2
 8001090:	d105      	bne.n	800109e <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2101      	movs	r1, #1
 8001098:	4618      	mov	r0, r3
 800109a:	f002 facc 	bl	8003636 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f002 fd84 	bl	8003bac <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f002 fa82 	bl	80035b2 <USB_ReadInterrupts>
 80010ae:	4603      	mov	r3, r0
 80010b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80010b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010b8:	d102      	bne.n	80010c0 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f001 fca1 	bl	8002a02 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f002 fa74 	bl	80035b2 <USB_ReadInterrupts>
 80010ca:	4603      	mov	r3, r0
 80010cc:	f003 0308 	and.w	r3, r3, #8
 80010d0:	2b08      	cmp	r3, #8
 80010d2:	d106      	bne.n	80010e2 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f002 fd4d 	bl	8003b74 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2208      	movs	r2, #8
 80010e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f002 fa63 	bl	80035b2 <USB_ReadInterrupts>
 80010ec:	4603      	mov	r3, r0
 80010ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80010f6:	d139      	bne.n	800116c <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f002 fad7 	bl	80036b0 <USB_HC_ReadInterrupt>
 8001102:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
 8001108:	e025      	b.n	8001156 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	f003 030f 	and.w	r3, r3, #15
 8001110:	68ba      	ldr	r2, [r7, #8]
 8001112:	fa22 f303 	lsr.w	r3, r2, r3
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	2b00      	cmp	r3, #0
 800111c:	d018      	beq.n	8001150 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	015a      	lsls	r2, r3, #5
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	4413      	add	r3, r2
 8001126:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001130:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001134:	d106      	bne.n	8001144 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	4619      	mov	r1, r3
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f000 f859 	bl	80011f4 <HCD_HC_IN_IRQHandler>
 8001142:	e005      	b.n	8001150 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	b2db      	uxtb	r3, r3
 8001148:	4619      	mov	r1, r3
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f000 febb 	bl	8001ec6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	3301      	adds	r3, #1
 8001154:	617b      	str	r3, [r7, #20]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	795b      	ldrb	r3, [r3, #5]
 800115a:	461a      	mov	r2, r3
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	4293      	cmp	r3, r2
 8001160:	d3d3      	bcc.n	800110a <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800116a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f002 fa1e 	bl	80035b2 <USB_ReadInterrupts>
 8001176:	4603      	mov	r3, r0
 8001178:	f003 0310 	and.w	r3, r3, #16
 800117c:	2b10      	cmp	r3, #16
 800117e:	d101      	bne.n	8001184 <HAL_HCD_IRQHandler+0x1ea>
 8001180:	2301      	movs	r3, #1
 8001182:	e000      	b.n	8001186 <HAL_HCD_IRQHandler+0x1ec>
 8001184:	2300      	movs	r3, #0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d014      	beq.n	80011b4 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	699a      	ldr	r2, [r3, #24]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f022 0210 	bic.w	r2, r2, #16
 8001198:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f001 fb52 	bl	8002844 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	699a      	ldr	r2, [r3, #24]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f042 0210 	orr.w	r2, r2, #16
 80011ae:	619a      	str	r2, [r3, #24]
 80011b0:	e000      	b.n	80011b4 <HAL_HCD_IRQHandler+0x21a>
      return;
 80011b2:	bf00      	nop
    }
  }
}
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d101      	bne.n	80011d0 <HAL_HCD_Stop+0x16>
 80011cc:	2302      	movs	r3, #2
 80011ce:	e00d      	b.n	80011ec <HAL_HCD_Stop+0x32>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2201      	movs	r2, #1
 80011d4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	f002 fb98 	bl	8003912 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	460b      	mov	r3, r1
 80011fe:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	78fa      	ldrb	r2, [r7, #3]
 8001210:	4611      	mov	r1, r2
 8001212:	4618      	mov	r0, r3
 8001214:	f002 f9e0 	bl	80035d8 <USB_ReadChInterrupts>
 8001218:	4603      	mov	r3, r0
 800121a:	f003 0304 	and.w	r3, r3, #4
 800121e:	2b04      	cmp	r3, #4
 8001220:	d11a      	bne.n	8001258 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001222:	78fb      	ldrb	r3, [r7, #3]
 8001224:	015a      	lsls	r2, r3, #5
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	4413      	add	r3, r2
 800122a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800122e:	461a      	mov	r2, r3
 8001230:	2304      	movs	r3, #4
 8001232:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001234:	78fa      	ldrb	r2, [r7, #3]
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	4613      	mov	r3, r2
 800123a:	011b      	lsls	r3, r3, #4
 800123c:	1a9b      	subs	r3, r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	440b      	add	r3, r1
 8001242:	334d      	adds	r3, #77	@ 0x4d
 8001244:	2207      	movs	r2, #7
 8001246:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	78fa      	ldrb	r2, [r7, #3]
 800124e:	4611      	mov	r1, r2
 8001250:	4618      	mov	r0, r3
 8001252:	f002 fa3e 	bl	80036d2 <USB_HC_Halt>
 8001256:	e09e      	b.n	8001396 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	78fa      	ldrb	r2, [r7, #3]
 800125e:	4611      	mov	r1, r2
 8001260:	4618      	mov	r0, r3
 8001262:	f002 f9b9 	bl	80035d8 <USB_ReadChInterrupts>
 8001266:	4603      	mov	r3, r0
 8001268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800126c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001270:	d11b      	bne.n	80012aa <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001272:	78fb      	ldrb	r3, [r7, #3]
 8001274:	015a      	lsls	r2, r3, #5
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	4413      	add	r3, r2
 800127a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800127e:	461a      	mov	r2, r3
 8001280:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001284:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001286:	78fa      	ldrb	r2, [r7, #3]
 8001288:	6879      	ldr	r1, [r7, #4]
 800128a:	4613      	mov	r3, r2
 800128c:	011b      	lsls	r3, r3, #4
 800128e:	1a9b      	subs	r3, r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	440b      	add	r3, r1
 8001294:	334d      	adds	r3, #77	@ 0x4d
 8001296:	2208      	movs	r2, #8
 8001298:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	78fa      	ldrb	r2, [r7, #3]
 80012a0:	4611      	mov	r1, r2
 80012a2:	4618      	mov	r0, r3
 80012a4:	f002 fa15 	bl	80036d2 <USB_HC_Halt>
 80012a8:	e075      	b.n	8001396 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	78fa      	ldrb	r2, [r7, #3]
 80012b0:	4611      	mov	r1, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f002 f990 	bl	80035d8 <USB_ReadChInterrupts>
 80012b8:	4603      	mov	r3, r0
 80012ba:	f003 0308 	and.w	r3, r3, #8
 80012be:	2b08      	cmp	r3, #8
 80012c0:	d11a      	bne.n	80012f8 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80012c2:	78fb      	ldrb	r3, [r7, #3]
 80012c4:	015a      	lsls	r2, r3, #5
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	4413      	add	r3, r2
 80012ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80012ce:	461a      	mov	r2, r3
 80012d0:	2308      	movs	r3, #8
 80012d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80012d4:	78fa      	ldrb	r2, [r7, #3]
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	4613      	mov	r3, r2
 80012da:	011b      	lsls	r3, r3, #4
 80012dc:	1a9b      	subs	r3, r3, r2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	440b      	add	r3, r1
 80012e2:	334d      	adds	r3, #77	@ 0x4d
 80012e4:	2206      	movs	r2, #6
 80012e6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	78fa      	ldrb	r2, [r7, #3]
 80012ee:	4611      	mov	r1, r2
 80012f0:	4618      	mov	r0, r3
 80012f2:	f002 f9ee 	bl	80036d2 <USB_HC_Halt>
 80012f6:	e04e      	b.n	8001396 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	78fa      	ldrb	r2, [r7, #3]
 80012fe:	4611      	mov	r1, r2
 8001300:	4618      	mov	r0, r3
 8001302:	f002 f969 	bl	80035d8 <USB_ReadChInterrupts>
 8001306:	4603      	mov	r3, r0
 8001308:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800130c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001310:	d11b      	bne.n	800134a <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001312:	78fb      	ldrb	r3, [r7, #3]
 8001314:	015a      	lsls	r2, r3, #5
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	4413      	add	r3, r2
 800131a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800131e:	461a      	mov	r2, r3
 8001320:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001324:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001326:	78fa      	ldrb	r2, [r7, #3]
 8001328:	6879      	ldr	r1, [r7, #4]
 800132a:	4613      	mov	r3, r2
 800132c:	011b      	lsls	r3, r3, #4
 800132e:	1a9b      	subs	r3, r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	440b      	add	r3, r1
 8001334:	334d      	adds	r3, #77	@ 0x4d
 8001336:	2209      	movs	r2, #9
 8001338:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	78fa      	ldrb	r2, [r7, #3]
 8001340:	4611      	mov	r1, r2
 8001342:	4618      	mov	r0, r3
 8001344:	f002 f9c5 	bl	80036d2 <USB_HC_Halt>
 8001348:	e025      	b.n	8001396 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	78fa      	ldrb	r2, [r7, #3]
 8001350:	4611      	mov	r1, r2
 8001352:	4618      	mov	r0, r3
 8001354:	f002 f940 	bl	80035d8 <USB_ReadChInterrupts>
 8001358:	4603      	mov	r3, r0
 800135a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800135e:	2b80      	cmp	r3, #128	@ 0x80
 8001360:	d119      	bne.n	8001396 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001362:	78fb      	ldrb	r3, [r7, #3]
 8001364:	015a      	lsls	r2, r3, #5
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	4413      	add	r3, r2
 800136a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800136e:	461a      	mov	r2, r3
 8001370:	2380      	movs	r3, #128	@ 0x80
 8001372:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001374:	78fa      	ldrb	r2, [r7, #3]
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	4613      	mov	r3, r2
 800137a:	011b      	lsls	r3, r3, #4
 800137c:	1a9b      	subs	r3, r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	440b      	add	r3, r1
 8001382:	334d      	adds	r3, #77	@ 0x4d
 8001384:	2207      	movs	r2, #7
 8001386:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	78fa      	ldrb	r2, [r7, #3]
 800138e:	4611      	mov	r1, r2
 8001390:	4618      	mov	r0, r3
 8001392:	f002 f99e 	bl	80036d2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	78fa      	ldrb	r2, [r7, #3]
 800139c:	4611      	mov	r1, r2
 800139e:	4618      	mov	r0, r3
 80013a0:	f002 f91a 	bl	80035d8 <USB_ReadChInterrupts>
 80013a4:	4603      	mov	r3, r0
 80013a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013ae:	d112      	bne.n	80013d6 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	78fa      	ldrb	r2, [r7, #3]
 80013b6:	4611      	mov	r1, r2
 80013b8:	4618      	mov	r0, r3
 80013ba:	f002 f98a 	bl	80036d2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80013be:	78fb      	ldrb	r3, [r7, #3]
 80013c0:	015a      	lsls	r2, r3, #5
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	4413      	add	r3, r2
 80013c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80013ca:	461a      	mov	r2, r3
 80013cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013d0:	6093      	str	r3, [r2, #8]
 80013d2:	f000 bd75 	b.w	8001ec0 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	78fa      	ldrb	r2, [r7, #3]
 80013dc:	4611      	mov	r1, r2
 80013de:	4618      	mov	r0, r3
 80013e0:	f002 f8fa 	bl	80035d8 <USB_ReadChInterrupts>
 80013e4:	4603      	mov	r3, r0
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	f040 8128 	bne.w	8001640 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80013f0:	78fb      	ldrb	r3, [r7, #3]
 80013f2:	015a      	lsls	r2, r3, #5
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	4413      	add	r3, r2
 80013f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80013fc:	461a      	mov	r2, r3
 80013fe:	2320      	movs	r3, #32
 8001400:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001402:	78fa      	ldrb	r2, [r7, #3]
 8001404:	6879      	ldr	r1, [r7, #4]
 8001406:	4613      	mov	r3, r2
 8001408:	011b      	lsls	r3, r3, #4
 800140a:	1a9b      	subs	r3, r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	440b      	add	r3, r1
 8001410:	331b      	adds	r3, #27
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d119      	bne.n	800144c <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001418:	78fa      	ldrb	r2, [r7, #3]
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	4613      	mov	r3, r2
 800141e:	011b      	lsls	r3, r3, #4
 8001420:	1a9b      	subs	r3, r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	440b      	add	r3, r1
 8001426:	331b      	adds	r3, #27
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800142c:	78fb      	ldrb	r3, [r7, #3]
 800142e:	015a      	lsls	r2, r3, #5
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	4413      	add	r3, r2
 8001434:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	78fa      	ldrb	r2, [r7, #3]
 800143c:	0151      	lsls	r1, r2, #5
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	440a      	add	r2, r1
 8001442:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001446:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800144a:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	799b      	ldrb	r3, [r3, #6]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d01b      	beq.n	800148c <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001454:	78fa      	ldrb	r2, [r7, #3]
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	4613      	mov	r3, r2
 800145a:	011b      	lsls	r3, r3, #4
 800145c:	1a9b      	subs	r3, r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	440b      	add	r3, r1
 8001462:	3330      	adds	r3, #48	@ 0x30
 8001464:	6819      	ldr	r1, [r3, #0]
 8001466:	78fb      	ldrb	r3, [r7, #3]
 8001468:	015a      	lsls	r2, r3, #5
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	4413      	add	r3, r2
 800146e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001478:	78fa      	ldrb	r2, [r7, #3]
 800147a:	1ac9      	subs	r1, r1, r3
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	4613      	mov	r3, r2
 8001480:	011b      	lsls	r3, r3, #4
 8001482:	1a9b      	subs	r3, r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	4403      	add	r3, r0
 8001488:	3338      	adds	r3, #56	@ 0x38
 800148a:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800148c:	78fa      	ldrb	r2, [r7, #3]
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	4613      	mov	r3, r2
 8001492:	011b      	lsls	r3, r3, #4
 8001494:	1a9b      	subs	r3, r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	440b      	add	r3, r1
 800149a:	334d      	adds	r3, #77	@ 0x4d
 800149c:	2201      	movs	r2, #1
 800149e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80014a0:	78fa      	ldrb	r2, [r7, #3]
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	4613      	mov	r3, r2
 80014a6:	011b      	lsls	r3, r3, #4
 80014a8:	1a9b      	subs	r3, r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	440b      	add	r3, r1
 80014ae:	3344      	adds	r3, #68	@ 0x44
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80014b4:	78fb      	ldrb	r3, [r7, #3]
 80014b6:	015a      	lsls	r2, r3, #5
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	4413      	add	r3, r2
 80014bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80014c0:	461a      	mov	r2, r3
 80014c2:	2301      	movs	r3, #1
 80014c4:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80014c6:	78fa      	ldrb	r2, [r7, #3]
 80014c8:	6879      	ldr	r1, [r7, #4]
 80014ca:	4613      	mov	r3, r2
 80014cc:	011b      	lsls	r3, r3, #4
 80014ce:	1a9b      	subs	r3, r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	440b      	add	r3, r1
 80014d4:	3326      	adds	r3, #38	@ 0x26
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d00a      	beq.n	80014f2 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80014dc:	78fa      	ldrb	r2, [r7, #3]
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	4613      	mov	r3, r2
 80014e2:	011b      	lsls	r3, r3, #4
 80014e4:	1a9b      	subs	r3, r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	440b      	add	r3, r1
 80014ea:	3326      	adds	r3, #38	@ 0x26
 80014ec:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d110      	bne.n	8001514 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	78fa      	ldrb	r2, [r7, #3]
 80014f8:	4611      	mov	r1, r2
 80014fa:	4618      	mov	r0, r3
 80014fc:	f002 f8e9 	bl	80036d2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001500:	78fb      	ldrb	r3, [r7, #3]
 8001502:	015a      	lsls	r2, r3, #5
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4413      	add	r3, r2
 8001508:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800150c:	461a      	mov	r2, r3
 800150e:	2310      	movs	r3, #16
 8001510:	6093      	str	r3, [r2, #8]
 8001512:	e03d      	b.n	8001590 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001514:	78fa      	ldrb	r2, [r7, #3]
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	4613      	mov	r3, r2
 800151a:	011b      	lsls	r3, r3, #4
 800151c:	1a9b      	subs	r3, r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	440b      	add	r3, r1
 8001522:	3326      	adds	r3, #38	@ 0x26
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b03      	cmp	r3, #3
 8001528:	d00a      	beq.n	8001540 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800152a:	78fa      	ldrb	r2, [r7, #3]
 800152c:	6879      	ldr	r1, [r7, #4]
 800152e:	4613      	mov	r3, r2
 8001530:	011b      	lsls	r3, r3, #4
 8001532:	1a9b      	subs	r3, r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	440b      	add	r3, r1
 8001538:	3326      	adds	r3, #38	@ 0x26
 800153a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800153c:	2b01      	cmp	r3, #1
 800153e:	d127      	bne.n	8001590 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001540:	78fb      	ldrb	r3, [r7, #3]
 8001542:	015a      	lsls	r2, r3, #5
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	4413      	add	r3, r2
 8001548:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	78fa      	ldrb	r2, [r7, #3]
 8001550:	0151      	lsls	r1, r2, #5
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	440a      	add	r2, r1
 8001556:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800155a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800155e:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001560:	78fa      	ldrb	r2, [r7, #3]
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	4613      	mov	r3, r2
 8001566:	011b      	lsls	r3, r3, #4
 8001568:	1a9b      	subs	r3, r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	440b      	add	r3, r1
 800156e:	334c      	adds	r3, #76	@ 0x4c
 8001570:	2201      	movs	r2, #1
 8001572:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001574:	78fa      	ldrb	r2, [r7, #3]
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	4613      	mov	r3, r2
 800157a:	011b      	lsls	r3, r3, #4
 800157c:	1a9b      	subs	r3, r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	440b      	add	r3, r1
 8001582:	334c      	adds	r3, #76	@ 0x4c
 8001584:	781a      	ldrb	r2, [r3, #0]
 8001586:	78fb      	ldrb	r3, [r7, #3]
 8001588:	4619      	mov	r1, r3
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f002 fb1c 	bl	8003bc8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	799b      	ldrb	r3, [r3, #6]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d13b      	bne.n	8001610 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8001598:	78fa      	ldrb	r2, [r7, #3]
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	4613      	mov	r3, r2
 800159e:	011b      	lsls	r3, r3, #4
 80015a0:	1a9b      	subs	r3, r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	440b      	add	r3, r1
 80015a6:	3338      	adds	r3, #56	@ 0x38
 80015a8:	6819      	ldr	r1, [r3, #0]
 80015aa:	78fa      	ldrb	r2, [r7, #3]
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	4613      	mov	r3, r2
 80015b0:	011b      	lsls	r3, r3, #4
 80015b2:	1a9b      	subs	r3, r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4403      	add	r3, r0
 80015b8:	3328      	adds	r3, #40	@ 0x28
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	440b      	add	r3, r1
 80015be:	1e59      	subs	r1, r3, #1
 80015c0:	78fa      	ldrb	r2, [r7, #3]
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	4613      	mov	r3, r2
 80015c6:	011b      	lsls	r3, r3, #4
 80015c8:	1a9b      	subs	r3, r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4403      	add	r3, r0
 80015ce:	3328      	adds	r3, #40	@ 0x28
 80015d0:	881b      	ldrh	r3, [r3, #0]
 80015d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f000 8470 	beq.w	8001ec0 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80015e0:	78fa      	ldrb	r2, [r7, #3]
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	4613      	mov	r3, r2
 80015e6:	011b      	lsls	r3, r3, #4
 80015e8:	1a9b      	subs	r3, r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	333c      	adds	r3, #60	@ 0x3c
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	78fa      	ldrb	r2, [r7, #3]
 80015f4:	f083 0301 	eor.w	r3, r3, #1
 80015f8:	b2d8      	uxtb	r0, r3
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	4613      	mov	r3, r2
 80015fe:	011b      	lsls	r3, r3, #4
 8001600:	1a9b      	subs	r3, r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	440b      	add	r3, r1
 8001606:	333c      	adds	r3, #60	@ 0x3c
 8001608:	4602      	mov	r2, r0
 800160a:	701a      	strb	r2, [r3, #0]
 800160c:	f000 bc58 	b.w	8001ec0 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8001610:	78fa      	ldrb	r2, [r7, #3]
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	4613      	mov	r3, r2
 8001616:	011b      	lsls	r3, r3, #4
 8001618:	1a9b      	subs	r3, r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	440b      	add	r3, r1
 800161e:	333c      	adds	r3, #60	@ 0x3c
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	78fa      	ldrb	r2, [r7, #3]
 8001624:	f083 0301 	eor.w	r3, r3, #1
 8001628:	b2d8      	uxtb	r0, r3
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	4613      	mov	r3, r2
 800162e:	011b      	lsls	r3, r3, #4
 8001630:	1a9b      	subs	r3, r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	440b      	add	r3, r1
 8001636:	333c      	adds	r3, #60	@ 0x3c
 8001638:	4602      	mov	r2, r0
 800163a:	701a      	strb	r2, [r3, #0]
 800163c:	f000 bc40 	b.w	8001ec0 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	78fa      	ldrb	r2, [r7, #3]
 8001646:	4611      	mov	r1, r2
 8001648:	4618      	mov	r0, r3
 800164a:	f001 ffc5 	bl	80035d8 <USB_ReadChInterrupts>
 800164e:	4603      	mov	r3, r0
 8001650:	f003 0320 	and.w	r3, r3, #32
 8001654:	2b20      	cmp	r3, #32
 8001656:	d131      	bne.n	80016bc <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001658:	78fb      	ldrb	r3, [r7, #3]
 800165a:	015a      	lsls	r2, r3, #5
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	4413      	add	r3, r2
 8001660:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001664:	461a      	mov	r2, r3
 8001666:	2320      	movs	r3, #32
 8001668:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800166a:	78fa      	ldrb	r2, [r7, #3]
 800166c:	6879      	ldr	r1, [r7, #4]
 800166e:	4613      	mov	r3, r2
 8001670:	011b      	lsls	r3, r3, #4
 8001672:	1a9b      	subs	r3, r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	440b      	add	r3, r1
 8001678:	331a      	adds	r3, #26
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b01      	cmp	r3, #1
 800167e:	f040 841f 	bne.w	8001ec0 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8001682:	78fa      	ldrb	r2, [r7, #3]
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	4613      	mov	r3, r2
 8001688:	011b      	lsls	r3, r3, #4
 800168a:	1a9b      	subs	r3, r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	440b      	add	r3, r1
 8001690:	331b      	adds	r3, #27
 8001692:	2201      	movs	r2, #1
 8001694:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8001696:	78fa      	ldrb	r2, [r7, #3]
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	4613      	mov	r3, r2
 800169c:	011b      	lsls	r3, r3, #4
 800169e:	1a9b      	subs	r3, r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	440b      	add	r3, r1
 80016a4:	334d      	adds	r3, #77	@ 0x4d
 80016a6:	2203      	movs	r2, #3
 80016a8:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	78fa      	ldrb	r2, [r7, #3]
 80016b0:	4611      	mov	r1, r2
 80016b2:	4618      	mov	r0, r3
 80016b4:	f002 f80d 	bl	80036d2 <USB_HC_Halt>
 80016b8:	f000 bc02 	b.w	8001ec0 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	78fa      	ldrb	r2, [r7, #3]
 80016c2:	4611      	mov	r1, r2
 80016c4:	4618      	mov	r0, r3
 80016c6:	f001 ff87 	bl	80035d8 <USB_ReadChInterrupts>
 80016ca:	4603      	mov	r3, r0
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	f040 8305 	bne.w	8001ce0 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80016d6:	78fb      	ldrb	r3, [r7, #3]
 80016d8:	015a      	lsls	r2, r3, #5
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	4413      	add	r3, r2
 80016de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80016e2:	461a      	mov	r2, r3
 80016e4:	2302      	movs	r3, #2
 80016e6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80016e8:	78fa      	ldrb	r2, [r7, #3]
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	4613      	mov	r3, r2
 80016ee:	011b      	lsls	r3, r3, #4
 80016f0:	1a9b      	subs	r3, r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	440b      	add	r3, r1
 80016f6:	334d      	adds	r3, #77	@ 0x4d
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d114      	bne.n	8001728 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80016fe:	78fa      	ldrb	r2, [r7, #3]
 8001700:	6879      	ldr	r1, [r7, #4]
 8001702:	4613      	mov	r3, r2
 8001704:	011b      	lsls	r3, r3, #4
 8001706:	1a9b      	subs	r3, r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	440b      	add	r3, r1
 800170c:	334d      	adds	r3, #77	@ 0x4d
 800170e:	2202      	movs	r2, #2
 8001710:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001712:	78fa      	ldrb	r2, [r7, #3]
 8001714:	6879      	ldr	r1, [r7, #4]
 8001716:	4613      	mov	r3, r2
 8001718:	011b      	lsls	r3, r3, #4
 800171a:	1a9b      	subs	r3, r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	440b      	add	r3, r1
 8001720:	334c      	adds	r3, #76	@ 0x4c
 8001722:	2201      	movs	r2, #1
 8001724:	701a      	strb	r2, [r3, #0]
 8001726:	e2cc      	b.n	8001cc2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8001728:	78fa      	ldrb	r2, [r7, #3]
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	4613      	mov	r3, r2
 800172e:	011b      	lsls	r3, r3, #4
 8001730:	1a9b      	subs	r3, r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	440b      	add	r3, r1
 8001736:	334d      	adds	r3, #77	@ 0x4d
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b06      	cmp	r3, #6
 800173c:	d114      	bne.n	8001768 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800173e:	78fa      	ldrb	r2, [r7, #3]
 8001740:	6879      	ldr	r1, [r7, #4]
 8001742:	4613      	mov	r3, r2
 8001744:	011b      	lsls	r3, r3, #4
 8001746:	1a9b      	subs	r3, r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	440b      	add	r3, r1
 800174c:	334d      	adds	r3, #77	@ 0x4d
 800174e:	2202      	movs	r2, #2
 8001750:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8001752:	78fa      	ldrb	r2, [r7, #3]
 8001754:	6879      	ldr	r1, [r7, #4]
 8001756:	4613      	mov	r3, r2
 8001758:	011b      	lsls	r3, r3, #4
 800175a:	1a9b      	subs	r3, r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	440b      	add	r3, r1
 8001760:	334c      	adds	r3, #76	@ 0x4c
 8001762:	2205      	movs	r2, #5
 8001764:	701a      	strb	r2, [r3, #0]
 8001766:	e2ac      	b.n	8001cc2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001768:	78fa      	ldrb	r2, [r7, #3]
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	4613      	mov	r3, r2
 800176e:	011b      	lsls	r3, r3, #4
 8001770:	1a9b      	subs	r3, r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	440b      	add	r3, r1
 8001776:	334d      	adds	r3, #77	@ 0x4d
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2b07      	cmp	r3, #7
 800177c:	d00b      	beq.n	8001796 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800177e:	78fa      	ldrb	r2, [r7, #3]
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	4613      	mov	r3, r2
 8001784:	011b      	lsls	r3, r3, #4
 8001786:	1a9b      	subs	r3, r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	440b      	add	r3, r1
 800178c:	334d      	adds	r3, #77	@ 0x4d
 800178e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001790:	2b09      	cmp	r3, #9
 8001792:	f040 80a6 	bne.w	80018e2 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001796:	78fa      	ldrb	r2, [r7, #3]
 8001798:	6879      	ldr	r1, [r7, #4]
 800179a:	4613      	mov	r3, r2
 800179c:	011b      	lsls	r3, r3, #4
 800179e:	1a9b      	subs	r3, r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	440b      	add	r3, r1
 80017a4:	334d      	adds	r3, #77	@ 0x4d
 80017a6:	2202      	movs	r2, #2
 80017a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80017aa:	78fa      	ldrb	r2, [r7, #3]
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	4613      	mov	r3, r2
 80017b0:	011b      	lsls	r3, r3, #4
 80017b2:	1a9b      	subs	r3, r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	440b      	add	r3, r1
 80017b8:	3344      	adds	r3, #68	@ 0x44
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	1c59      	adds	r1, r3, #1
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	4613      	mov	r3, r2
 80017c2:	011b      	lsls	r3, r3, #4
 80017c4:	1a9b      	subs	r3, r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4403      	add	r3, r0
 80017ca:	3344      	adds	r3, #68	@ 0x44
 80017cc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80017ce:	78fa      	ldrb	r2, [r7, #3]
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	4613      	mov	r3, r2
 80017d4:	011b      	lsls	r3, r3, #4
 80017d6:	1a9b      	subs	r3, r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	440b      	add	r3, r1
 80017dc:	3344      	adds	r3, #68	@ 0x44
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d943      	bls.n	800186c <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80017e4:	78fa      	ldrb	r2, [r7, #3]
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	4613      	mov	r3, r2
 80017ea:	011b      	lsls	r3, r3, #4
 80017ec:	1a9b      	subs	r3, r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	440b      	add	r3, r1
 80017f2:	3344      	adds	r3, #68	@ 0x44
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80017f8:	78fa      	ldrb	r2, [r7, #3]
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	4613      	mov	r3, r2
 80017fe:	011b      	lsls	r3, r3, #4
 8001800:	1a9b      	subs	r3, r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	440b      	add	r3, r1
 8001806:	331a      	adds	r3, #26
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d123      	bne.n	8001856 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800180e:	78fa      	ldrb	r2, [r7, #3]
 8001810:	6879      	ldr	r1, [r7, #4]
 8001812:	4613      	mov	r3, r2
 8001814:	011b      	lsls	r3, r3, #4
 8001816:	1a9b      	subs	r3, r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	440b      	add	r3, r1
 800181c:	331b      	adds	r3, #27
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8001822:	78fa      	ldrb	r2, [r7, #3]
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	4613      	mov	r3, r2
 8001828:	011b      	lsls	r3, r3, #4
 800182a:	1a9b      	subs	r3, r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	440b      	add	r3, r1
 8001830:	331c      	adds	r3, #28
 8001832:	2200      	movs	r2, #0
 8001834:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001836:	78fb      	ldrb	r3, [r7, #3]
 8001838:	015a      	lsls	r2, r3, #5
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	4413      	add	r3, r2
 800183e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	78fa      	ldrb	r2, [r7, #3]
 8001846:	0151      	lsls	r1, r2, #5
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	440a      	add	r2, r1
 800184c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001850:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001854:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001856:	78fa      	ldrb	r2, [r7, #3]
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	4613      	mov	r3, r2
 800185c:	011b      	lsls	r3, r3, #4
 800185e:	1a9b      	subs	r3, r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	440b      	add	r3, r1
 8001864:	334c      	adds	r3, #76	@ 0x4c
 8001866:	2204      	movs	r2, #4
 8001868:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800186a:	e229      	b.n	8001cc0 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800186c:	78fa      	ldrb	r2, [r7, #3]
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	4613      	mov	r3, r2
 8001872:	011b      	lsls	r3, r3, #4
 8001874:	1a9b      	subs	r3, r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	440b      	add	r3, r1
 800187a:	334c      	adds	r3, #76	@ 0x4c
 800187c:	2202      	movs	r2, #2
 800187e:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001880:	78fa      	ldrb	r2, [r7, #3]
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	4613      	mov	r3, r2
 8001886:	011b      	lsls	r3, r3, #4
 8001888:	1a9b      	subs	r3, r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	440b      	add	r3, r1
 800188e:	3326      	adds	r3, #38	@ 0x26
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d00b      	beq.n	80018ae <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001896:	78fa      	ldrb	r2, [r7, #3]
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	4613      	mov	r3, r2
 800189c:	011b      	lsls	r3, r3, #4
 800189e:	1a9b      	subs	r3, r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	440b      	add	r3, r1
 80018a4:	3326      	adds	r3, #38	@ 0x26
 80018a6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	f040 8209 	bne.w	8001cc0 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80018ae:	78fb      	ldrb	r3, [r7, #3]
 80018b0:	015a      	lsls	r2, r3, #5
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	4413      	add	r3, r2
 80018b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80018c4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80018cc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80018ce:	78fb      	ldrb	r3, [r7, #3]
 80018d0:	015a      	lsls	r2, r3, #5
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	4413      	add	r3, r2
 80018d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80018da:	461a      	mov	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80018e0:	e1ee      	b.n	8001cc0 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80018e2:	78fa      	ldrb	r2, [r7, #3]
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	011b      	lsls	r3, r3, #4
 80018ea:	1a9b      	subs	r3, r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	440b      	add	r3, r1
 80018f0:	334d      	adds	r3, #77	@ 0x4d
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b05      	cmp	r3, #5
 80018f6:	f040 80c8 	bne.w	8001a8a <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80018fa:	78fa      	ldrb	r2, [r7, #3]
 80018fc:	6879      	ldr	r1, [r7, #4]
 80018fe:	4613      	mov	r3, r2
 8001900:	011b      	lsls	r3, r3, #4
 8001902:	1a9b      	subs	r3, r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	440b      	add	r3, r1
 8001908:	334d      	adds	r3, #77	@ 0x4d
 800190a:	2202      	movs	r2, #2
 800190c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800190e:	78fa      	ldrb	r2, [r7, #3]
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	011b      	lsls	r3, r3, #4
 8001916:	1a9b      	subs	r3, r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	331b      	adds	r3, #27
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b01      	cmp	r3, #1
 8001922:	f040 81ce 	bne.w	8001cc2 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001926:	78fa      	ldrb	r2, [r7, #3]
 8001928:	6879      	ldr	r1, [r7, #4]
 800192a:	4613      	mov	r3, r2
 800192c:	011b      	lsls	r3, r3, #4
 800192e:	1a9b      	subs	r3, r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	440b      	add	r3, r1
 8001934:	3326      	adds	r3, #38	@ 0x26
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b03      	cmp	r3, #3
 800193a:	d16b      	bne.n	8001a14 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800193c:	78fa      	ldrb	r2, [r7, #3]
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	011b      	lsls	r3, r3, #4
 8001944:	1a9b      	subs	r3, r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	440b      	add	r3, r1
 800194a:	3348      	adds	r3, #72	@ 0x48
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	1c59      	adds	r1, r3, #1
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	4613      	mov	r3, r2
 8001954:	011b      	lsls	r3, r3, #4
 8001956:	1a9b      	subs	r3, r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4403      	add	r3, r0
 800195c:	3348      	adds	r3, #72	@ 0x48
 800195e:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8001960:	78fa      	ldrb	r2, [r7, #3]
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	4613      	mov	r3, r2
 8001966:	011b      	lsls	r3, r3, #4
 8001968:	1a9b      	subs	r3, r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	440b      	add	r3, r1
 800196e:	3348      	adds	r3, #72	@ 0x48
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d943      	bls.n	80019fe <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8001976:	78fa      	ldrb	r2, [r7, #3]
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	4613      	mov	r3, r2
 800197c:	011b      	lsls	r3, r3, #4
 800197e:	1a9b      	subs	r3, r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	440b      	add	r3, r1
 8001984:	3348      	adds	r3, #72	@ 0x48
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800198a:	78fa      	ldrb	r2, [r7, #3]
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	4613      	mov	r3, r2
 8001990:	011b      	lsls	r3, r3, #4
 8001992:	1a9b      	subs	r3, r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	440b      	add	r3, r1
 8001998:	331b      	adds	r3, #27
 800199a:	2200      	movs	r2, #0
 800199c:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800199e:	78fa      	ldrb	r2, [r7, #3]
 80019a0:	6879      	ldr	r1, [r7, #4]
 80019a2:	4613      	mov	r3, r2
 80019a4:	011b      	lsls	r3, r3, #4
 80019a6:	1a9b      	subs	r3, r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	440b      	add	r3, r1
 80019ac:	3344      	adds	r3, #68	@ 0x44
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d809      	bhi.n	80019c8 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80019b4:	78fa      	ldrb	r2, [r7, #3]
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	4613      	mov	r3, r2
 80019ba:	011b      	lsls	r3, r3, #4
 80019bc:	1a9b      	subs	r3, r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	440b      	add	r3, r1
 80019c2:	331c      	adds	r3, #28
 80019c4:	2201      	movs	r2, #1
 80019c6:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80019c8:	78fb      	ldrb	r3, [r7, #3]
 80019ca:	015a      	lsls	r2, r3, #5
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	4413      	add	r3, r2
 80019d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	78fa      	ldrb	r2, [r7, #3]
 80019d8:	0151      	lsls	r1, r2, #5
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	440a      	add	r2, r1
 80019de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80019e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019e6:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80019e8:	78fa      	ldrb	r2, [r7, #3]
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	4613      	mov	r3, r2
 80019ee:	011b      	lsls	r3, r3, #4
 80019f0:	1a9b      	subs	r3, r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	440b      	add	r3, r1
 80019f6:	334c      	adds	r3, #76	@ 0x4c
 80019f8:	2204      	movs	r2, #4
 80019fa:	701a      	strb	r2, [r3, #0]
 80019fc:	e014      	b.n	8001a28 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80019fe:	78fa      	ldrb	r2, [r7, #3]
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	4613      	mov	r3, r2
 8001a04:	011b      	lsls	r3, r3, #4
 8001a06:	1a9b      	subs	r3, r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	440b      	add	r3, r1
 8001a0c:	334c      	adds	r3, #76	@ 0x4c
 8001a0e:	2202      	movs	r2, #2
 8001a10:	701a      	strb	r2, [r3, #0]
 8001a12:	e009      	b.n	8001a28 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001a14:	78fa      	ldrb	r2, [r7, #3]
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	011b      	lsls	r3, r3, #4
 8001a1c:	1a9b      	subs	r3, r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	440b      	add	r3, r1
 8001a22:	334c      	adds	r3, #76	@ 0x4c
 8001a24:	2202      	movs	r2, #2
 8001a26:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001a28:	78fa      	ldrb	r2, [r7, #3]
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	011b      	lsls	r3, r3, #4
 8001a30:	1a9b      	subs	r3, r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	440b      	add	r3, r1
 8001a36:	3326      	adds	r3, #38	@ 0x26
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00b      	beq.n	8001a56 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001a3e:	78fa      	ldrb	r2, [r7, #3]
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	4613      	mov	r3, r2
 8001a44:	011b      	lsls	r3, r3, #4
 8001a46:	1a9b      	subs	r3, r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	3326      	adds	r3, #38	@ 0x26
 8001a4e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	f040 8136 	bne.w	8001cc2 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001a56:	78fb      	ldrb	r3, [r7, #3]
 8001a58:	015a      	lsls	r2, r3, #5
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001a6c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001a74:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001a76:	78fb      	ldrb	r3, [r7, #3]
 8001a78:	015a      	lsls	r2, r3, #5
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a82:	461a      	mov	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6013      	str	r3, [r2, #0]
 8001a88:	e11b      	b.n	8001cc2 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8001a8a:	78fa      	ldrb	r2, [r7, #3]
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	011b      	lsls	r3, r3, #4
 8001a92:	1a9b      	subs	r3, r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	440b      	add	r3, r1
 8001a98:	334d      	adds	r3, #77	@ 0x4d
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b03      	cmp	r3, #3
 8001a9e:	f040 8081 	bne.w	8001ba4 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001aa2:	78fa      	ldrb	r2, [r7, #3]
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	011b      	lsls	r3, r3, #4
 8001aaa:	1a9b      	subs	r3, r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	440b      	add	r3, r1
 8001ab0:	334d      	adds	r3, #77	@ 0x4d
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8001ab6:	78fa      	ldrb	r2, [r7, #3]
 8001ab8:	6879      	ldr	r1, [r7, #4]
 8001aba:	4613      	mov	r3, r2
 8001abc:	011b      	lsls	r3, r3, #4
 8001abe:	1a9b      	subs	r3, r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	440b      	add	r3, r1
 8001ac4:	331b      	adds	r3, #27
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	f040 80fa 	bne.w	8001cc2 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001ace:	78fa      	ldrb	r2, [r7, #3]
 8001ad0:	6879      	ldr	r1, [r7, #4]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	011b      	lsls	r3, r3, #4
 8001ad6:	1a9b      	subs	r3, r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	440b      	add	r3, r1
 8001adc:	334c      	adds	r3, #76	@ 0x4c
 8001ade:	2202      	movs	r2, #2
 8001ae0:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8001ae2:	78fb      	ldrb	r3, [r7, #3]
 8001ae4:	015a      	lsls	r2, r3, #5
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	4413      	add	r3, r2
 8001aea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	78fa      	ldrb	r2, [r7, #3]
 8001af2:	0151      	lsls	r1, r2, #5
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	440a      	add	r2, r1
 8001af8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001afc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b00:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8001b02:	78fb      	ldrb	r3, [r7, #3]
 8001b04:	015a      	lsls	r2, r3, #5
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	4413      	add	r3, r2
 8001b0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	78fa      	ldrb	r2, [r7, #3]
 8001b12:	0151      	lsls	r1, r2, #5
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	440a      	add	r2, r1
 8001b18:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001b1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b20:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8001b22:	78fb      	ldrb	r3, [r7, #3]
 8001b24:	015a      	lsls	r2, r3, #5
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	4413      	add	r3, r2
 8001b2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	78fa      	ldrb	r2, [r7, #3]
 8001b32:	0151      	lsls	r1, r2, #5
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	440a      	add	r2, r1
 8001b38:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001b3c:	f023 0320 	bic.w	r3, r3, #32
 8001b40:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001b42:	78fa      	ldrb	r2, [r7, #3]
 8001b44:	6879      	ldr	r1, [r7, #4]
 8001b46:	4613      	mov	r3, r2
 8001b48:	011b      	lsls	r3, r3, #4
 8001b4a:	1a9b      	subs	r3, r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	440b      	add	r3, r1
 8001b50:	3326      	adds	r3, #38	@ 0x26
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00b      	beq.n	8001b70 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001b58:	78fa      	ldrb	r2, [r7, #3]
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	011b      	lsls	r3, r3, #4
 8001b60:	1a9b      	subs	r3, r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	440b      	add	r3, r1
 8001b66:	3326      	adds	r3, #38	@ 0x26
 8001b68:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	f040 80a9 	bne.w	8001cc2 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001b70:	78fb      	ldrb	r3, [r7, #3]
 8001b72:	015a      	lsls	r2, r3, #5
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	4413      	add	r3, r2
 8001b78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001b86:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001b8e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001b90:	78fb      	ldrb	r3, [r7, #3]
 8001b92:	015a      	lsls	r2, r3, #5
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	4413      	add	r3, r2
 8001b98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6013      	str	r3, [r2, #0]
 8001ba2:	e08e      	b.n	8001cc2 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8001ba4:	78fa      	ldrb	r2, [r7, #3]
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	011b      	lsls	r3, r3, #4
 8001bac:	1a9b      	subs	r3, r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	440b      	add	r3, r1
 8001bb2:	334d      	adds	r3, #77	@ 0x4d
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	d143      	bne.n	8001c42 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001bba:	78fa      	ldrb	r2, [r7, #3]
 8001bbc:	6879      	ldr	r1, [r7, #4]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	011b      	lsls	r3, r3, #4
 8001bc2:	1a9b      	subs	r3, r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	440b      	add	r3, r1
 8001bc8:	334d      	adds	r3, #77	@ 0x4d
 8001bca:	2202      	movs	r2, #2
 8001bcc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001bce:	78fa      	ldrb	r2, [r7, #3]
 8001bd0:	6879      	ldr	r1, [r7, #4]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	011b      	lsls	r3, r3, #4
 8001bd6:	1a9b      	subs	r3, r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	440b      	add	r3, r1
 8001bdc:	334c      	adds	r3, #76	@ 0x4c
 8001bde:	2202      	movs	r2, #2
 8001be0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001be2:	78fa      	ldrb	r2, [r7, #3]
 8001be4:	6879      	ldr	r1, [r7, #4]
 8001be6:	4613      	mov	r3, r2
 8001be8:	011b      	lsls	r3, r3, #4
 8001bea:	1a9b      	subs	r3, r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	440b      	add	r3, r1
 8001bf0:	3326      	adds	r3, #38	@ 0x26
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00a      	beq.n	8001c0e <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001bf8:	78fa      	ldrb	r2, [r7, #3]
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	011b      	lsls	r3, r3, #4
 8001c00:	1a9b      	subs	r3, r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	440b      	add	r3, r1
 8001c06:	3326      	adds	r3, #38	@ 0x26
 8001c08:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d159      	bne.n	8001cc2 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8001c0e:	78fb      	ldrb	r3, [r7, #3]
 8001c10:	015a      	lsls	r2, r3, #5
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	4413      	add	r3, r2
 8001c16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001c24:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001c2c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8001c2e:	78fb      	ldrb	r3, [r7, #3]
 8001c30:	015a      	lsls	r2, r3, #5
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	4413      	add	r3, r2
 8001c36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6013      	str	r3, [r2, #0]
 8001c40:	e03f      	b.n	8001cc2 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8001c42:	78fa      	ldrb	r2, [r7, #3]
 8001c44:	6879      	ldr	r1, [r7, #4]
 8001c46:	4613      	mov	r3, r2
 8001c48:	011b      	lsls	r3, r3, #4
 8001c4a:	1a9b      	subs	r3, r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	440b      	add	r3, r1
 8001c50:	334d      	adds	r3, #77	@ 0x4d
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b08      	cmp	r3, #8
 8001c56:	d126      	bne.n	8001ca6 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001c58:	78fa      	ldrb	r2, [r7, #3]
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	011b      	lsls	r3, r3, #4
 8001c60:	1a9b      	subs	r3, r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	440b      	add	r3, r1
 8001c66:	334d      	adds	r3, #77	@ 0x4d
 8001c68:	2202      	movs	r2, #2
 8001c6a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8001c6c:	78fa      	ldrb	r2, [r7, #3]
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	4613      	mov	r3, r2
 8001c72:	011b      	lsls	r3, r3, #4
 8001c74:	1a9b      	subs	r3, r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	440b      	add	r3, r1
 8001c7a:	3344      	adds	r3, #68	@ 0x44
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	1c59      	adds	r1, r3, #1
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	4613      	mov	r3, r2
 8001c84:	011b      	lsls	r3, r3, #4
 8001c86:	1a9b      	subs	r3, r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4403      	add	r3, r0
 8001c8c:	3344      	adds	r3, #68	@ 0x44
 8001c8e:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8001c90:	78fa      	ldrb	r2, [r7, #3]
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	4613      	mov	r3, r2
 8001c96:	011b      	lsls	r3, r3, #4
 8001c98:	1a9b      	subs	r3, r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	440b      	add	r3, r1
 8001c9e:	334c      	adds	r3, #76	@ 0x4c
 8001ca0:	2204      	movs	r2, #4
 8001ca2:	701a      	strb	r2, [r3, #0]
 8001ca4:	e00d      	b.n	8001cc2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8001ca6:	78fa      	ldrb	r2, [r7, #3]
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	4613      	mov	r3, r2
 8001cac:	011b      	lsls	r3, r3, #4
 8001cae:	1a9b      	subs	r3, r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	334d      	adds	r3, #77	@ 0x4d
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	f000 8100 	beq.w	8001ebe <HCD_HC_IN_IRQHandler+0xcca>
 8001cbe:	e000      	b.n	8001cc2 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001cc0:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001cc2:	78fa      	ldrb	r2, [r7, #3]
 8001cc4:	6879      	ldr	r1, [r7, #4]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	011b      	lsls	r3, r3, #4
 8001cca:	1a9b      	subs	r3, r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	440b      	add	r3, r1
 8001cd0:	334c      	adds	r3, #76	@ 0x4c
 8001cd2:	781a      	ldrb	r2, [r3, #0]
 8001cd4:	78fb      	ldrb	r3, [r7, #3]
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f001 ff75 	bl	8003bc8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001cde:	e0ef      	b.n	8001ec0 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	78fa      	ldrb	r2, [r7, #3]
 8001ce6:	4611      	mov	r1, r2
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f001 fc75 	bl	80035d8 <USB_ReadChInterrupts>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cf4:	2b40      	cmp	r3, #64	@ 0x40
 8001cf6:	d12f      	bne.n	8001d58 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8001cf8:	78fb      	ldrb	r3, [r7, #3]
 8001cfa:	015a      	lsls	r2, r3, #5
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	4413      	add	r3, r2
 8001d00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d04:	461a      	mov	r2, r3
 8001d06:	2340      	movs	r3, #64	@ 0x40
 8001d08:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8001d0a:	78fa      	ldrb	r2, [r7, #3]
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	011b      	lsls	r3, r3, #4
 8001d12:	1a9b      	subs	r3, r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	440b      	add	r3, r1
 8001d18:	334d      	adds	r3, #77	@ 0x4d
 8001d1a:	2205      	movs	r2, #5
 8001d1c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8001d1e:	78fa      	ldrb	r2, [r7, #3]
 8001d20:	6879      	ldr	r1, [r7, #4]
 8001d22:	4613      	mov	r3, r2
 8001d24:	011b      	lsls	r3, r3, #4
 8001d26:	1a9b      	subs	r3, r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	331a      	adds	r3, #26
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d109      	bne.n	8001d48 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8001d34:	78fa      	ldrb	r2, [r7, #3]
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	011b      	lsls	r3, r3, #4
 8001d3c:	1a9b      	subs	r3, r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	440b      	add	r3, r1
 8001d42:	3344      	adds	r3, #68	@ 0x44
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	78fa      	ldrb	r2, [r7, #3]
 8001d4e:	4611      	mov	r1, r2
 8001d50:	4618      	mov	r0, r3
 8001d52:	f001 fcbe 	bl	80036d2 <USB_HC_Halt>
 8001d56:	e0b3      	b.n	8001ec0 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	78fa      	ldrb	r2, [r7, #3]
 8001d5e:	4611      	mov	r1, r2
 8001d60:	4618      	mov	r0, r3
 8001d62:	f001 fc39 	bl	80035d8 <USB_ReadChInterrupts>
 8001d66:	4603      	mov	r3, r0
 8001d68:	f003 0310 	and.w	r3, r3, #16
 8001d6c:	2b10      	cmp	r3, #16
 8001d6e:	f040 80a7 	bne.w	8001ec0 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001d72:	78fa      	ldrb	r2, [r7, #3]
 8001d74:	6879      	ldr	r1, [r7, #4]
 8001d76:	4613      	mov	r3, r2
 8001d78:	011b      	lsls	r3, r3, #4
 8001d7a:	1a9b      	subs	r3, r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	440b      	add	r3, r1
 8001d80:	3326      	adds	r3, #38	@ 0x26
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b03      	cmp	r3, #3
 8001d86:	d11b      	bne.n	8001dc0 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8001d88:	78fa      	ldrb	r2, [r7, #3]
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	011b      	lsls	r3, r3, #4
 8001d90:	1a9b      	subs	r3, r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	440b      	add	r3, r1
 8001d96:	3344      	adds	r3, #68	@ 0x44
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8001d9c:	78fa      	ldrb	r2, [r7, #3]
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	4613      	mov	r3, r2
 8001da2:	011b      	lsls	r3, r3, #4
 8001da4:	1a9b      	subs	r3, r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	440b      	add	r3, r1
 8001daa:	334d      	adds	r3, #77	@ 0x4d
 8001dac:	2204      	movs	r2, #4
 8001dae:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	78fa      	ldrb	r2, [r7, #3]
 8001db6:	4611      	mov	r1, r2
 8001db8:	4618      	mov	r0, r3
 8001dba:	f001 fc8a 	bl	80036d2 <USB_HC_Halt>
 8001dbe:	e03f      	b.n	8001e40 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001dc0:	78fa      	ldrb	r2, [r7, #3]
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	011b      	lsls	r3, r3, #4
 8001dc8:	1a9b      	subs	r3, r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	440b      	add	r3, r1
 8001dce:	3326      	adds	r3, #38	@ 0x26
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00a      	beq.n	8001dec <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001dd6:	78fa      	ldrb	r2, [r7, #3]
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	011b      	lsls	r3, r3, #4
 8001dde:	1a9b      	subs	r3, r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	440b      	add	r3, r1
 8001de4:	3326      	adds	r3, #38	@ 0x26
 8001de6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d129      	bne.n	8001e40 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8001dec:	78fa      	ldrb	r2, [r7, #3]
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	011b      	lsls	r3, r3, #4
 8001df4:	1a9b      	subs	r3, r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	440b      	add	r3, r1
 8001dfa:	3344      	adds	r3, #68	@ 0x44
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	799b      	ldrb	r3, [r3, #6]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d00a      	beq.n	8001e1e <HCD_HC_IN_IRQHandler+0xc2a>
 8001e08:	78fa      	ldrb	r2, [r7, #3]
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	011b      	lsls	r3, r3, #4
 8001e10:	1a9b      	subs	r3, r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	440b      	add	r3, r1
 8001e16:	331b      	adds	r3, #27
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d110      	bne.n	8001e40 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8001e1e:	78fa      	ldrb	r2, [r7, #3]
 8001e20:	6879      	ldr	r1, [r7, #4]
 8001e22:	4613      	mov	r3, r2
 8001e24:	011b      	lsls	r3, r3, #4
 8001e26:	1a9b      	subs	r3, r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	440b      	add	r3, r1
 8001e2c:	334d      	adds	r3, #77	@ 0x4d
 8001e2e:	2204      	movs	r2, #4
 8001e30:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	78fa      	ldrb	r2, [r7, #3]
 8001e38:	4611      	mov	r1, r2
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f001 fc49 	bl	80036d2 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001e40:	78fa      	ldrb	r2, [r7, #3]
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	4613      	mov	r3, r2
 8001e46:	011b      	lsls	r3, r3, #4
 8001e48:	1a9b      	subs	r3, r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	331b      	adds	r3, #27
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d129      	bne.n	8001eaa <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001e56:	78fa      	ldrb	r2, [r7, #3]
 8001e58:	6879      	ldr	r1, [r7, #4]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	011b      	lsls	r3, r3, #4
 8001e5e:	1a9b      	subs	r3, r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	440b      	add	r3, r1
 8001e64:	331b      	adds	r3, #27
 8001e66:	2200      	movs	r2, #0
 8001e68:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001e6a:	78fb      	ldrb	r3, [r7, #3]
 8001e6c:	015a      	lsls	r2, r3, #5
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	4413      	add	r3, r2
 8001e72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	78fa      	ldrb	r2, [r7, #3]
 8001e7a:	0151      	lsls	r1, r2, #5
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	440a      	add	r2, r1
 8001e80:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001e84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e88:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8001e8a:	78fb      	ldrb	r3, [r7, #3]
 8001e8c:	015a      	lsls	r2, r3, #5
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	4413      	add	r3, r2
 8001e92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	78fa      	ldrb	r2, [r7, #3]
 8001e9a:	0151      	lsls	r1, r2, #5
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	440a      	add	r2, r1
 8001ea0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001ea4:	f043 0320 	orr.w	r3, r3, #32
 8001ea8:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001eaa:	78fb      	ldrb	r3, [r7, #3]
 8001eac:	015a      	lsls	r2, r3, #5
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	2310      	movs	r3, #16
 8001eba:	6093      	str	r3, [r2, #8]
 8001ebc:	e000      	b.n	8001ec0 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8001ebe:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b086      	sub	sp, #24
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	460b      	mov	r3, r1
 8001ed0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	78fa      	ldrb	r2, [r7, #3]
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f001 fb77 	bl	80035d8 <USB_ReadChInterrupts>
 8001eea:	4603      	mov	r3, r0
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d11b      	bne.n	8001f2c <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001ef4:	78fb      	ldrb	r3, [r7, #3]
 8001ef6:	015a      	lsls	r2, r3, #5
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	4413      	add	r3, r2
 8001efc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f00:	461a      	mov	r2, r3
 8001f02:	2304      	movs	r3, #4
 8001f04:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001f06:	78fa      	ldrb	r2, [r7, #3]
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	011b      	lsls	r3, r3, #4
 8001f0e:	1a9b      	subs	r3, r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	440b      	add	r3, r1
 8001f14:	334d      	adds	r3, #77	@ 0x4d
 8001f16:	2207      	movs	r2, #7
 8001f18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	78fa      	ldrb	r2, [r7, #3]
 8001f20:	4611      	mov	r1, r2
 8001f22:	4618      	mov	r0, r3
 8001f24:	f001 fbd5 	bl	80036d2 <USB_HC_Halt>
 8001f28:	f000 bc89 	b.w	800283e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	78fa      	ldrb	r2, [r7, #3]
 8001f32:	4611      	mov	r1, r2
 8001f34:	4618      	mov	r0, r3
 8001f36:	f001 fb4f 	bl	80035d8 <USB_ReadChInterrupts>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	f003 0320 	and.w	r3, r3, #32
 8001f40:	2b20      	cmp	r3, #32
 8001f42:	f040 8082 	bne.w	800204a <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001f46:	78fb      	ldrb	r3, [r7, #3]
 8001f48:	015a      	lsls	r2, r3, #5
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f52:	461a      	mov	r2, r3
 8001f54:	2320      	movs	r3, #32
 8001f56:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8001f58:	78fa      	ldrb	r2, [r7, #3]
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	011b      	lsls	r3, r3, #4
 8001f60:	1a9b      	subs	r3, r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	3319      	adds	r3, #25
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d124      	bne.n	8001fb8 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8001f6e:	78fa      	ldrb	r2, [r7, #3]
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	4613      	mov	r3, r2
 8001f74:	011b      	lsls	r3, r3, #4
 8001f76:	1a9b      	subs	r3, r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	440b      	add	r3, r1
 8001f7c:	3319      	adds	r3, #25
 8001f7e:	2200      	movs	r2, #0
 8001f80:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001f82:	78fa      	ldrb	r2, [r7, #3]
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	4613      	mov	r3, r2
 8001f88:	011b      	lsls	r3, r3, #4
 8001f8a:	1a9b      	subs	r3, r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	440b      	add	r3, r1
 8001f90:	334c      	adds	r3, #76	@ 0x4c
 8001f92:	2202      	movs	r2, #2
 8001f94:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8001f96:	78fa      	ldrb	r2, [r7, #3]
 8001f98:	6879      	ldr	r1, [r7, #4]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	011b      	lsls	r3, r3, #4
 8001f9e:	1a9b      	subs	r3, r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	440b      	add	r3, r1
 8001fa4:	334d      	adds	r3, #77	@ 0x4d
 8001fa6:	2203      	movs	r2, #3
 8001fa8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	78fa      	ldrb	r2, [r7, #3]
 8001fb0:	4611      	mov	r1, r2
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f001 fb8d 	bl	80036d2 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8001fb8:	78fa      	ldrb	r2, [r7, #3]
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	011b      	lsls	r3, r3, #4
 8001fc0:	1a9b      	subs	r3, r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	331a      	adds	r3, #26
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	f040 8437 	bne.w	800283e <HCD_HC_OUT_IRQHandler+0x978>
 8001fd0:	78fa      	ldrb	r2, [r7, #3]
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	011b      	lsls	r3, r3, #4
 8001fd8:	1a9b      	subs	r3, r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	440b      	add	r3, r1
 8001fde:	331b      	adds	r3, #27
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f040 842b 	bne.w	800283e <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8001fe8:	78fa      	ldrb	r2, [r7, #3]
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	011b      	lsls	r3, r3, #4
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	3326      	adds	r3, #38	@ 0x26
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d009      	beq.n	8002012 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8001ffe:	78fa      	ldrb	r2, [r7, #3]
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	011b      	lsls	r3, r3, #4
 8002006:	1a9b      	subs	r3, r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	440b      	add	r3, r1
 800200c:	331b      	adds	r3, #27
 800200e:	2201      	movs	r2, #1
 8002010:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002012:	78fa      	ldrb	r2, [r7, #3]
 8002014:	6879      	ldr	r1, [r7, #4]
 8002016:	4613      	mov	r3, r2
 8002018:	011b      	lsls	r3, r3, #4
 800201a:	1a9b      	subs	r3, r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	440b      	add	r3, r1
 8002020:	334d      	adds	r3, #77	@ 0x4d
 8002022:	2203      	movs	r2, #3
 8002024:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	78fa      	ldrb	r2, [r7, #3]
 800202c:	4611      	mov	r1, r2
 800202e:	4618      	mov	r0, r3
 8002030:	f001 fb4f 	bl	80036d2 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002034:	78fa      	ldrb	r2, [r7, #3]
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	011b      	lsls	r3, r3, #4
 800203c:	1a9b      	subs	r3, r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	3344      	adds	r3, #68	@ 0x44
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	e3f9      	b.n	800283e <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	78fa      	ldrb	r2, [r7, #3]
 8002050:	4611      	mov	r1, r2
 8002052:	4618      	mov	r0, r3
 8002054:	f001 fac0 	bl	80035d8 <USB_ReadChInterrupts>
 8002058:	4603      	mov	r3, r0
 800205a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800205e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002062:	d111      	bne.n	8002088 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002064:	78fb      	ldrb	r3, [r7, #3]
 8002066:	015a      	lsls	r2, r3, #5
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	4413      	add	r3, r2
 800206c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002070:	461a      	mov	r2, r3
 8002072:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002076:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	78fa      	ldrb	r2, [r7, #3]
 800207e:	4611      	mov	r1, r2
 8002080:	4618      	mov	r0, r3
 8002082:	f001 fb26 	bl	80036d2 <USB_HC_Halt>
 8002086:	e3da      	b.n	800283e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	78fa      	ldrb	r2, [r7, #3]
 800208e:	4611      	mov	r1, r2
 8002090:	4618      	mov	r0, r3
 8002092:	f001 faa1 	bl	80035d8 <USB_ReadChInterrupts>
 8002096:	4603      	mov	r3, r0
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b01      	cmp	r3, #1
 800209e:	d168      	bne.n	8002172 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80020a0:	78fa      	ldrb	r2, [r7, #3]
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	011b      	lsls	r3, r3, #4
 80020a8:	1a9b      	subs	r3, r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	3344      	adds	r3, #68	@ 0x44
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	78fa      	ldrb	r2, [r7, #3]
 80020ba:	4611      	mov	r1, r2
 80020bc:	4618      	mov	r0, r3
 80020be:	f001 fa8b 	bl	80035d8 <USB_ReadChInterrupts>
 80020c2:	4603      	mov	r3, r0
 80020c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020c8:	2b40      	cmp	r3, #64	@ 0x40
 80020ca:	d112      	bne.n	80020f2 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80020cc:	78fa      	ldrb	r2, [r7, #3]
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	4613      	mov	r3, r2
 80020d2:	011b      	lsls	r3, r3, #4
 80020d4:	1a9b      	subs	r3, r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	3319      	adds	r3, #25
 80020dc:	2201      	movs	r2, #1
 80020de:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80020e0:	78fb      	ldrb	r3, [r7, #3]
 80020e2:	015a      	lsls	r2, r3, #5
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	4413      	add	r3, r2
 80020e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020ec:	461a      	mov	r2, r3
 80020ee:	2340      	movs	r3, #64	@ 0x40
 80020f0:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80020f2:	78fa      	ldrb	r2, [r7, #3]
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	011b      	lsls	r3, r3, #4
 80020fa:	1a9b      	subs	r3, r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	440b      	add	r3, r1
 8002100:	331b      	adds	r3, #27
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d019      	beq.n	800213c <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002108:	78fa      	ldrb	r2, [r7, #3]
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	011b      	lsls	r3, r3, #4
 8002110:	1a9b      	subs	r3, r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	331b      	adds	r3, #27
 8002118:	2200      	movs	r2, #0
 800211a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800211c:	78fb      	ldrb	r3, [r7, #3]
 800211e:	015a      	lsls	r2, r3, #5
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	4413      	add	r3, r2
 8002124:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	78fa      	ldrb	r2, [r7, #3]
 800212c:	0151      	lsls	r1, r2, #5
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	440a      	add	r2, r1
 8002132:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002136:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800213a:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800213c:	78fb      	ldrb	r3, [r7, #3]
 800213e:	015a      	lsls	r2, r3, #5
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	4413      	add	r3, r2
 8002144:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002148:	461a      	mov	r2, r3
 800214a:	2301      	movs	r3, #1
 800214c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800214e:	78fa      	ldrb	r2, [r7, #3]
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	4613      	mov	r3, r2
 8002154:	011b      	lsls	r3, r3, #4
 8002156:	1a9b      	subs	r3, r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	440b      	add	r3, r1
 800215c:	334d      	adds	r3, #77	@ 0x4d
 800215e:	2201      	movs	r2, #1
 8002160:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	78fa      	ldrb	r2, [r7, #3]
 8002168:	4611      	mov	r1, r2
 800216a:	4618      	mov	r0, r3
 800216c:	f001 fab1 	bl	80036d2 <USB_HC_Halt>
 8002170:	e365      	b.n	800283e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	78fa      	ldrb	r2, [r7, #3]
 8002178:	4611      	mov	r1, r2
 800217a:	4618      	mov	r0, r3
 800217c:	f001 fa2c 	bl	80035d8 <USB_ReadChInterrupts>
 8002180:	4603      	mov	r3, r0
 8002182:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002186:	2b40      	cmp	r3, #64	@ 0x40
 8002188:	d139      	bne.n	80021fe <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800218a:	78fa      	ldrb	r2, [r7, #3]
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	4613      	mov	r3, r2
 8002190:	011b      	lsls	r3, r3, #4
 8002192:	1a9b      	subs	r3, r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	440b      	add	r3, r1
 8002198:	334d      	adds	r3, #77	@ 0x4d
 800219a:	2205      	movs	r2, #5
 800219c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800219e:	78fa      	ldrb	r2, [r7, #3]
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	011b      	lsls	r3, r3, #4
 80021a6:	1a9b      	subs	r3, r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	440b      	add	r3, r1
 80021ac:	331a      	adds	r3, #26
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d109      	bne.n	80021c8 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80021b4:	78fa      	ldrb	r2, [r7, #3]
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	4613      	mov	r3, r2
 80021ba:	011b      	lsls	r3, r3, #4
 80021bc:	1a9b      	subs	r3, r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	3319      	adds	r3, #25
 80021c4:	2201      	movs	r2, #1
 80021c6:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80021c8:	78fa      	ldrb	r2, [r7, #3]
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	4613      	mov	r3, r2
 80021ce:	011b      	lsls	r3, r3, #4
 80021d0:	1a9b      	subs	r3, r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	440b      	add	r3, r1
 80021d6:	3344      	adds	r3, #68	@ 0x44
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	78fa      	ldrb	r2, [r7, #3]
 80021e2:	4611      	mov	r1, r2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f001 fa74 	bl	80036d2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80021ea:	78fb      	ldrb	r3, [r7, #3]
 80021ec:	015a      	lsls	r2, r3, #5
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4413      	add	r3, r2
 80021f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021f6:	461a      	mov	r2, r3
 80021f8:	2340      	movs	r3, #64	@ 0x40
 80021fa:	6093      	str	r3, [r2, #8]
 80021fc:	e31f      	b.n	800283e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	78fa      	ldrb	r2, [r7, #3]
 8002204:	4611      	mov	r1, r2
 8002206:	4618      	mov	r0, r3
 8002208:	f001 f9e6 	bl	80035d8 <USB_ReadChInterrupts>
 800220c:	4603      	mov	r3, r0
 800220e:	f003 0308 	and.w	r3, r3, #8
 8002212:	2b08      	cmp	r3, #8
 8002214:	d11a      	bne.n	800224c <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002216:	78fb      	ldrb	r3, [r7, #3]
 8002218:	015a      	lsls	r2, r3, #5
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	4413      	add	r3, r2
 800221e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002222:	461a      	mov	r2, r3
 8002224:	2308      	movs	r3, #8
 8002226:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002228:	78fa      	ldrb	r2, [r7, #3]
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	4613      	mov	r3, r2
 800222e:	011b      	lsls	r3, r3, #4
 8002230:	1a9b      	subs	r3, r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	334d      	adds	r3, #77	@ 0x4d
 8002238:	2206      	movs	r2, #6
 800223a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	78fa      	ldrb	r2, [r7, #3]
 8002242:	4611      	mov	r1, r2
 8002244:	4618      	mov	r0, r3
 8002246:	f001 fa44 	bl	80036d2 <USB_HC_Halt>
 800224a:	e2f8      	b.n	800283e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	78fa      	ldrb	r2, [r7, #3]
 8002252:	4611      	mov	r1, r2
 8002254:	4618      	mov	r0, r3
 8002256:	f001 f9bf 	bl	80035d8 <USB_ReadChInterrupts>
 800225a:	4603      	mov	r3, r0
 800225c:	f003 0310 	and.w	r3, r3, #16
 8002260:	2b10      	cmp	r3, #16
 8002262:	d144      	bne.n	80022ee <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002264:	78fa      	ldrb	r2, [r7, #3]
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	4613      	mov	r3, r2
 800226a:	011b      	lsls	r3, r3, #4
 800226c:	1a9b      	subs	r3, r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	440b      	add	r3, r1
 8002272:	3344      	adds	r3, #68	@ 0x44
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002278:	78fa      	ldrb	r2, [r7, #3]
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	4613      	mov	r3, r2
 800227e:	011b      	lsls	r3, r3, #4
 8002280:	1a9b      	subs	r3, r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	440b      	add	r3, r1
 8002286:	334d      	adds	r3, #77	@ 0x4d
 8002288:	2204      	movs	r2, #4
 800228a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800228c:	78fa      	ldrb	r2, [r7, #3]
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	4613      	mov	r3, r2
 8002292:	011b      	lsls	r3, r3, #4
 8002294:	1a9b      	subs	r3, r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	440b      	add	r3, r1
 800229a:	3319      	adds	r3, #25
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d114      	bne.n	80022cc <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80022a2:	78fa      	ldrb	r2, [r7, #3]
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	011b      	lsls	r3, r3, #4
 80022aa:	1a9b      	subs	r3, r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	440b      	add	r3, r1
 80022b0:	3318      	adds	r3, #24
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d109      	bne.n	80022cc <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80022b8:	78fa      	ldrb	r2, [r7, #3]
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	4613      	mov	r3, r2
 80022be:	011b      	lsls	r3, r3, #4
 80022c0:	1a9b      	subs	r3, r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	3319      	adds	r3, #25
 80022c8:	2201      	movs	r2, #1
 80022ca:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	78fa      	ldrb	r2, [r7, #3]
 80022d2:	4611      	mov	r1, r2
 80022d4:	4618      	mov	r0, r3
 80022d6:	f001 f9fc 	bl	80036d2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80022da:	78fb      	ldrb	r3, [r7, #3]
 80022dc:	015a      	lsls	r2, r3, #5
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	4413      	add	r3, r2
 80022e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022e6:	461a      	mov	r2, r3
 80022e8:	2310      	movs	r3, #16
 80022ea:	6093      	str	r3, [r2, #8]
 80022ec:	e2a7      	b.n	800283e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	78fa      	ldrb	r2, [r7, #3]
 80022f4:	4611      	mov	r1, r2
 80022f6:	4618      	mov	r0, r3
 80022f8:	f001 f96e 	bl	80035d8 <USB_ReadChInterrupts>
 80022fc:	4603      	mov	r3, r0
 80022fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002302:	2b80      	cmp	r3, #128	@ 0x80
 8002304:	f040 8083 	bne.w	800240e <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	799b      	ldrb	r3, [r3, #6]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d111      	bne.n	8002334 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002310:	78fa      	ldrb	r2, [r7, #3]
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	4613      	mov	r3, r2
 8002316:	011b      	lsls	r3, r3, #4
 8002318:	1a9b      	subs	r3, r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	334d      	adds	r3, #77	@ 0x4d
 8002320:	2207      	movs	r2, #7
 8002322:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	78fa      	ldrb	r2, [r7, #3]
 800232a:	4611      	mov	r1, r2
 800232c:	4618      	mov	r0, r3
 800232e:	f001 f9d0 	bl	80036d2 <USB_HC_Halt>
 8002332:	e062      	b.n	80023fa <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002334:	78fa      	ldrb	r2, [r7, #3]
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	011b      	lsls	r3, r3, #4
 800233c:	1a9b      	subs	r3, r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	3344      	adds	r3, #68	@ 0x44
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	1c59      	adds	r1, r3, #1
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	011b      	lsls	r3, r3, #4
 800234e:	1a9b      	subs	r3, r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4403      	add	r3, r0
 8002354:	3344      	adds	r3, #68	@ 0x44
 8002356:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002358:	78fa      	ldrb	r2, [r7, #3]
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	011b      	lsls	r3, r3, #4
 8002360:	1a9b      	subs	r3, r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	3344      	adds	r3, #68	@ 0x44
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2b02      	cmp	r3, #2
 800236c:	d922      	bls.n	80023b4 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800236e:	78fa      	ldrb	r2, [r7, #3]
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	011b      	lsls	r3, r3, #4
 8002376:	1a9b      	subs	r3, r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	440b      	add	r3, r1
 800237c:	3344      	adds	r3, #68	@ 0x44
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002382:	78fa      	ldrb	r2, [r7, #3]
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	4613      	mov	r3, r2
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	1a9b      	subs	r3, r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	440b      	add	r3, r1
 8002390:	334c      	adds	r3, #76	@ 0x4c
 8002392:	2204      	movs	r2, #4
 8002394:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002396:	78fa      	ldrb	r2, [r7, #3]
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	4613      	mov	r3, r2
 800239c:	011b      	lsls	r3, r3, #4
 800239e:	1a9b      	subs	r3, r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	440b      	add	r3, r1
 80023a4:	334c      	adds	r3, #76	@ 0x4c
 80023a6:	781a      	ldrb	r2, [r3, #0]
 80023a8:	78fb      	ldrb	r3, [r7, #3]
 80023aa:	4619      	mov	r1, r3
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f001 fc0b 	bl	8003bc8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80023b2:	e022      	b.n	80023fa <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80023b4:	78fa      	ldrb	r2, [r7, #3]
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	4613      	mov	r3, r2
 80023ba:	011b      	lsls	r3, r3, #4
 80023bc:	1a9b      	subs	r3, r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	440b      	add	r3, r1
 80023c2:	334c      	adds	r3, #76	@ 0x4c
 80023c4:	2202      	movs	r2, #2
 80023c6:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80023c8:	78fb      	ldrb	r3, [r7, #3]
 80023ca:	015a      	lsls	r2, r3, #5
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	4413      	add	r3, r2
 80023d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80023de:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80023e6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80023e8:	78fb      	ldrb	r3, [r7, #3]
 80023ea:	015a      	lsls	r2, r3, #5
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4413      	add	r3, r2
 80023f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023f4:	461a      	mov	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80023fa:	78fb      	ldrb	r3, [r7, #3]
 80023fc:	015a      	lsls	r2, r3, #5
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	4413      	add	r3, r2
 8002402:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002406:	461a      	mov	r2, r3
 8002408:	2380      	movs	r3, #128	@ 0x80
 800240a:	6093      	str	r3, [r2, #8]
 800240c:	e217      	b.n	800283e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	78fa      	ldrb	r2, [r7, #3]
 8002414:	4611      	mov	r1, r2
 8002416:	4618      	mov	r0, r3
 8002418:	f001 f8de 	bl	80035d8 <USB_ReadChInterrupts>
 800241c:	4603      	mov	r3, r0
 800241e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002422:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002426:	d11b      	bne.n	8002460 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002428:	78fa      	ldrb	r2, [r7, #3]
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	4613      	mov	r3, r2
 800242e:	011b      	lsls	r3, r3, #4
 8002430:	1a9b      	subs	r3, r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	334d      	adds	r3, #77	@ 0x4d
 8002438:	2209      	movs	r2, #9
 800243a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	78fa      	ldrb	r2, [r7, #3]
 8002442:	4611      	mov	r1, r2
 8002444:	4618      	mov	r0, r3
 8002446:	f001 f944 	bl	80036d2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800244a:	78fb      	ldrb	r3, [r7, #3]
 800244c:	015a      	lsls	r2, r3, #5
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	4413      	add	r3, r2
 8002452:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002456:	461a      	mov	r2, r3
 8002458:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800245c:	6093      	str	r3, [r2, #8]
 800245e:	e1ee      	b.n	800283e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	78fa      	ldrb	r2, [r7, #3]
 8002466:	4611      	mov	r1, r2
 8002468:	4618      	mov	r0, r3
 800246a:	f001 f8b5 	bl	80035d8 <USB_ReadChInterrupts>
 800246e:	4603      	mov	r3, r0
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b02      	cmp	r3, #2
 8002476:	f040 81df 	bne.w	8002838 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800247a:	78fb      	ldrb	r3, [r7, #3]
 800247c:	015a      	lsls	r2, r3, #5
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	4413      	add	r3, r2
 8002482:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002486:	461a      	mov	r2, r3
 8002488:	2302      	movs	r3, #2
 800248a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800248c:	78fa      	ldrb	r2, [r7, #3]
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	4613      	mov	r3, r2
 8002492:	011b      	lsls	r3, r3, #4
 8002494:	1a9b      	subs	r3, r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	440b      	add	r3, r1
 800249a:	334d      	adds	r3, #77	@ 0x4d
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	f040 8093 	bne.w	80025ca <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80024a4:	78fa      	ldrb	r2, [r7, #3]
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	4613      	mov	r3, r2
 80024aa:	011b      	lsls	r3, r3, #4
 80024ac:	1a9b      	subs	r3, r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	334d      	adds	r3, #77	@ 0x4d
 80024b4:	2202      	movs	r2, #2
 80024b6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80024b8:	78fa      	ldrb	r2, [r7, #3]
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	4613      	mov	r3, r2
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	1a9b      	subs	r3, r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	334c      	adds	r3, #76	@ 0x4c
 80024c8:	2201      	movs	r2, #1
 80024ca:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80024cc:	78fa      	ldrb	r2, [r7, #3]
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	011b      	lsls	r3, r3, #4
 80024d4:	1a9b      	subs	r3, r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	3326      	adds	r3, #38	@ 0x26
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d00b      	beq.n	80024fa <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80024e2:	78fa      	ldrb	r2, [r7, #3]
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	4613      	mov	r3, r2
 80024e8:	011b      	lsls	r3, r3, #4
 80024ea:	1a9b      	subs	r3, r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	440b      	add	r3, r1
 80024f0:	3326      	adds	r3, #38	@ 0x26
 80024f2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80024f4:	2b03      	cmp	r3, #3
 80024f6:	f040 8190 	bne.w	800281a <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	799b      	ldrb	r3, [r3, #6]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d115      	bne.n	800252e <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8002502:	78fa      	ldrb	r2, [r7, #3]
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	4613      	mov	r3, r2
 8002508:	011b      	lsls	r3, r3, #4
 800250a:	1a9b      	subs	r3, r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	440b      	add	r3, r1
 8002510:	333d      	adds	r3, #61	@ 0x3d
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	78fa      	ldrb	r2, [r7, #3]
 8002516:	f083 0301 	eor.w	r3, r3, #1
 800251a:	b2d8      	uxtb	r0, r3
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	4613      	mov	r3, r2
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	1a9b      	subs	r3, r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	440b      	add	r3, r1
 8002528:	333d      	adds	r3, #61	@ 0x3d
 800252a:	4602      	mov	r2, r0
 800252c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	799b      	ldrb	r3, [r3, #6]
 8002532:	2b01      	cmp	r3, #1
 8002534:	f040 8171 	bne.w	800281a <HCD_HC_OUT_IRQHandler+0x954>
 8002538:	78fa      	ldrb	r2, [r7, #3]
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	011b      	lsls	r3, r3, #4
 8002540:	1a9b      	subs	r3, r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	3334      	adds	r3, #52	@ 0x34
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	f000 8165 	beq.w	800281a <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8002550:	78fa      	ldrb	r2, [r7, #3]
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	011b      	lsls	r3, r3, #4
 8002558:	1a9b      	subs	r3, r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	3334      	adds	r3, #52	@ 0x34
 8002560:	6819      	ldr	r1, [r3, #0]
 8002562:	78fa      	ldrb	r2, [r7, #3]
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	4613      	mov	r3, r2
 8002568:	011b      	lsls	r3, r3, #4
 800256a:	1a9b      	subs	r3, r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4403      	add	r3, r0
 8002570:	3328      	adds	r3, #40	@ 0x28
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	440b      	add	r3, r1
 8002576:	1e59      	subs	r1, r3, #1
 8002578:	78fa      	ldrb	r2, [r7, #3]
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	011b      	lsls	r3, r3, #4
 8002580:	1a9b      	subs	r3, r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4403      	add	r3, r0
 8002586:	3328      	adds	r3, #40	@ 0x28
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	fbb1 f3f3 	udiv	r3, r1, r3
 800258e:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 813f 	beq.w	800281a <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800259c:	78fa      	ldrb	r2, [r7, #3]
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	011b      	lsls	r3, r3, #4
 80025a4:	1a9b      	subs	r3, r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	333d      	adds	r3, #61	@ 0x3d
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	78fa      	ldrb	r2, [r7, #3]
 80025b0:	f083 0301 	eor.w	r3, r3, #1
 80025b4:	b2d8      	uxtb	r0, r3
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	4613      	mov	r3, r2
 80025ba:	011b      	lsls	r3, r3, #4
 80025bc:	1a9b      	subs	r3, r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	333d      	adds	r3, #61	@ 0x3d
 80025c4:	4602      	mov	r2, r0
 80025c6:	701a      	strb	r2, [r3, #0]
 80025c8:	e127      	b.n	800281a <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80025ca:	78fa      	ldrb	r2, [r7, #3]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	1a9b      	subs	r3, r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	334d      	adds	r3, #77	@ 0x4d
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b03      	cmp	r3, #3
 80025de:	d120      	bne.n	8002622 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80025e0:	78fa      	ldrb	r2, [r7, #3]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	011b      	lsls	r3, r3, #4
 80025e8:	1a9b      	subs	r3, r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	334d      	adds	r3, #77	@ 0x4d
 80025f0:	2202      	movs	r2, #2
 80025f2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80025f4:	78fa      	ldrb	r2, [r7, #3]
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	4613      	mov	r3, r2
 80025fa:	011b      	lsls	r3, r3, #4
 80025fc:	1a9b      	subs	r3, r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	440b      	add	r3, r1
 8002602:	331b      	adds	r3, #27
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	2b01      	cmp	r3, #1
 8002608:	f040 8107 	bne.w	800281a <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800260c:	78fa      	ldrb	r2, [r7, #3]
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	011b      	lsls	r3, r3, #4
 8002614:	1a9b      	subs	r3, r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	334c      	adds	r3, #76	@ 0x4c
 800261c:	2202      	movs	r2, #2
 800261e:	701a      	strb	r2, [r3, #0]
 8002620:	e0fb      	b.n	800281a <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002622:	78fa      	ldrb	r2, [r7, #3]
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	4613      	mov	r3, r2
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	1a9b      	subs	r3, r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	440b      	add	r3, r1
 8002630:	334d      	adds	r3, #77	@ 0x4d
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b04      	cmp	r3, #4
 8002636:	d13a      	bne.n	80026ae <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002638:	78fa      	ldrb	r2, [r7, #3]
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	4613      	mov	r3, r2
 800263e:	011b      	lsls	r3, r3, #4
 8002640:	1a9b      	subs	r3, r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	334d      	adds	r3, #77	@ 0x4d
 8002648:	2202      	movs	r2, #2
 800264a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800264c:	78fa      	ldrb	r2, [r7, #3]
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	4613      	mov	r3, r2
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	1a9b      	subs	r3, r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	334c      	adds	r3, #76	@ 0x4c
 800265c:	2202      	movs	r2, #2
 800265e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002660:	78fa      	ldrb	r2, [r7, #3]
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	1a9b      	subs	r3, r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	331b      	adds	r3, #27
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b01      	cmp	r3, #1
 8002674:	f040 80d1 	bne.w	800281a <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8002678:	78fa      	ldrb	r2, [r7, #3]
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	4613      	mov	r3, r2
 800267e:	011b      	lsls	r3, r3, #4
 8002680:	1a9b      	subs	r3, r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	440b      	add	r3, r1
 8002686:	331b      	adds	r3, #27
 8002688:	2200      	movs	r2, #0
 800268a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800268c:	78fb      	ldrb	r3, [r7, #3]
 800268e:	015a      	lsls	r2, r3, #5
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	4413      	add	r3, r2
 8002694:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	78fa      	ldrb	r2, [r7, #3]
 800269c:	0151      	lsls	r1, r2, #5
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	440a      	add	r2, r1
 80026a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026aa:	6053      	str	r3, [r2, #4]
 80026ac:	e0b5      	b.n	800281a <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80026ae:	78fa      	ldrb	r2, [r7, #3]
 80026b0:	6879      	ldr	r1, [r7, #4]
 80026b2:	4613      	mov	r3, r2
 80026b4:	011b      	lsls	r3, r3, #4
 80026b6:	1a9b      	subs	r3, r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	440b      	add	r3, r1
 80026bc:	334d      	adds	r3, #77	@ 0x4d
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b05      	cmp	r3, #5
 80026c2:	d114      	bne.n	80026ee <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026c4:	78fa      	ldrb	r2, [r7, #3]
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	4613      	mov	r3, r2
 80026ca:	011b      	lsls	r3, r3, #4
 80026cc:	1a9b      	subs	r3, r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	440b      	add	r3, r1
 80026d2:	334d      	adds	r3, #77	@ 0x4d
 80026d4:	2202      	movs	r2, #2
 80026d6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80026d8:	78fa      	ldrb	r2, [r7, #3]
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	4613      	mov	r3, r2
 80026de:	011b      	lsls	r3, r3, #4
 80026e0:	1a9b      	subs	r3, r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	334c      	adds	r3, #76	@ 0x4c
 80026e8:	2202      	movs	r2, #2
 80026ea:	701a      	strb	r2, [r3, #0]
 80026ec:	e095      	b.n	800281a <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80026ee:	78fa      	ldrb	r2, [r7, #3]
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	4613      	mov	r3, r2
 80026f4:	011b      	lsls	r3, r3, #4
 80026f6:	1a9b      	subs	r3, r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	440b      	add	r3, r1
 80026fc:	334d      	adds	r3, #77	@ 0x4d
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b06      	cmp	r3, #6
 8002702:	d114      	bne.n	800272e <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002704:	78fa      	ldrb	r2, [r7, #3]
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	4613      	mov	r3, r2
 800270a:	011b      	lsls	r3, r3, #4
 800270c:	1a9b      	subs	r3, r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	334d      	adds	r3, #77	@ 0x4d
 8002714:	2202      	movs	r2, #2
 8002716:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8002718:	78fa      	ldrb	r2, [r7, #3]
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	4613      	mov	r3, r2
 800271e:	011b      	lsls	r3, r3, #4
 8002720:	1a9b      	subs	r3, r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	334c      	adds	r3, #76	@ 0x4c
 8002728:	2205      	movs	r2, #5
 800272a:	701a      	strb	r2, [r3, #0]
 800272c:	e075      	b.n	800281a <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800272e:	78fa      	ldrb	r2, [r7, #3]
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	4613      	mov	r3, r2
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	1a9b      	subs	r3, r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	440b      	add	r3, r1
 800273c:	334d      	adds	r3, #77	@ 0x4d
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b07      	cmp	r3, #7
 8002742:	d00a      	beq.n	800275a <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002744:	78fa      	ldrb	r2, [r7, #3]
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	1a9b      	subs	r3, r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	334d      	adds	r3, #77	@ 0x4d
 8002754:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002756:	2b09      	cmp	r3, #9
 8002758:	d170      	bne.n	800283c <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800275a:	78fa      	ldrb	r2, [r7, #3]
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	4613      	mov	r3, r2
 8002760:	011b      	lsls	r3, r3, #4
 8002762:	1a9b      	subs	r3, r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	440b      	add	r3, r1
 8002768:	334d      	adds	r3, #77	@ 0x4d
 800276a:	2202      	movs	r2, #2
 800276c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800276e:	78fa      	ldrb	r2, [r7, #3]
 8002770:	6879      	ldr	r1, [r7, #4]
 8002772:	4613      	mov	r3, r2
 8002774:	011b      	lsls	r3, r3, #4
 8002776:	1a9b      	subs	r3, r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	440b      	add	r3, r1
 800277c:	3344      	adds	r3, #68	@ 0x44
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	1c59      	adds	r1, r3, #1
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	4613      	mov	r3, r2
 8002786:	011b      	lsls	r3, r3, #4
 8002788:	1a9b      	subs	r3, r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4403      	add	r3, r0
 800278e:	3344      	adds	r3, #68	@ 0x44
 8002790:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002792:	78fa      	ldrb	r2, [r7, #3]
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	4613      	mov	r3, r2
 8002798:	011b      	lsls	r3, r3, #4
 800279a:	1a9b      	subs	r3, r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	440b      	add	r3, r1
 80027a0:	3344      	adds	r3, #68	@ 0x44
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d914      	bls.n	80027d2 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80027a8:	78fa      	ldrb	r2, [r7, #3]
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	4613      	mov	r3, r2
 80027ae:	011b      	lsls	r3, r3, #4
 80027b0:	1a9b      	subs	r3, r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	3344      	adds	r3, #68	@ 0x44
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80027bc:	78fa      	ldrb	r2, [r7, #3]
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	4613      	mov	r3, r2
 80027c2:	011b      	lsls	r3, r3, #4
 80027c4:	1a9b      	subs	r3, r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	334c      	adds	r3, #76	@ 0x4c
 80027cc:	2204      	movs	r2, #4
 80027ce:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80027d0:	e022      	b.n	8002818 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80027d2:	78fa      	ldrb	r2, [r7, #3]
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	4613      	mov	r3, r2
 80027d8:	011b      	lsls	r3, r3, #4
 80027da:	1a9b      	subs	r3, r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	440b      	add	r3, r1
 80027e0:	334c      	adds	r3, #76	@ 0x4c
 80027e2:	2202      	movs	r2, #2
 80027e4:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80027e6:	78fb      	ldrb	r3, [r7, #3]
 80027e8:	015a      	lsls	r2, r3, #5
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	4413      	add	r3, r2
 80027ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80027fc:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002804:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002806:	78fb      	ldrb	r3, [r7, #3]
 8002808:	015a      	lsls	r2, r3, #5
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	4413      	add	r3, r2
 800280e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002812:	461a      	mov	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002818:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800281a:	78fa      	ldrb	r2, [r7, #3]
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	4613      	mov	r3, r2
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	1a9b      	subs	r3, r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	440b      	add	r3, r1
 8002828:	334c      	adds	r3, #76	@ 0x4c
 800282a:	781a      	ldrb	r2, [r3, #0]
 800282c:	78fb      	ldrb	r3, [r7, #3]
 800282e:	4619      	mov	r1, r3
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f001 f9c9 	bl	8003bc8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002836:	e002      	b.n	800283e <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8002838:	bf00      	nop
 800283a:	e000      	b.n	800283e <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800283c:	bf00      	nop
  }
}
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b08a      	sub	sp, #40	@ 0x28
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002854:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	f003 030f 	and.w	r3, r3, #15
 8002864:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	0c5b      	lsrs	r3, r3, #17
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	091b      	lsrs	r3, r3, #4
 8002874:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002878:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	2b02      	cmp	r3, #2
 800287e:	d004      	beq.n	800288a <HCD_RXQLVL_IRQHandler+0x46>
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	2b05      	cmp	r3, #5
 8002884:	f000 80b6 	beq.w	80029f4 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002888:	e0b7      	b.n	80029fa <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 80b3 	beq.w	80029f8 <HCD_RXQLVL_IRQHandler+0x1b4>
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4613      	mov	r3, r2
 8002898:	011b      	lsls	r3, r3, #4
 800289a:	1a9b      	subs	r3, r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	440b      	add	r3, r1
 80028a0:	332c      	adds	r3, #44	@ 0x2c
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 80a7 	beq.w	80029f8 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4613      	mov	r3, r2
 80028b0:	011b      	lsls	r3, r3, #4
 80028b2:	1a9b      	subs	r3, r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	440b      	add	r3, r1
 80028b8:	3338      	adds	r3, #56	@ 0x38
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	18d1      	adds	r1, r2, r3
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4613      	mov	r3, r2
 80028c6:	011b      	lsls	r3, r3, #4
 80028c8:	1a9b      	subs	r3, r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4403      	add	r3, r0
 80028ce:	3334      	adds	r3, #52	@ 0x34
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4299      	cmp	r1, r3
 80028d4:	f200 8083 	bhi.w	80029de <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6818      	ldr	r0, [r3, #0]
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4613      	mov	r3, r2
 80028e2:	011b      	lsls	r3, r3, #4
 80028e4:	1a9b      	subs	r3, r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	332c      	adds	r3, #44	@ 0x2c
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	b292      	uxth	r2, r2
 80028f2:	4619      	mov	r1, r3
 80028f4:	f000 fe05 	bl	8003502 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4613      	mov	r3, r2
 80028fe:	011b      	lsls	r3, r3, #4
 8002900:	1a9b      	subs	r3, r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	440b      	add	r3, r1
 8002906:	332c      	adds	r3, #44	@ 0x2c
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	18d1      	adds	r1, r2, r3
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4613      	mov	r3, r2
 8002914:	011b      	lsls	r3, r3, #4
 8002916:	1a9b      	subs	r3, r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4403      	add	r3, r0
 800291c:	332c      	adds	r3, #44	@ 0x2c
 800291e:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4613      	mov	r3, r2
 8002926:	011b      	lsls	r3, r3, #4
 8002928:	1a9b      	subs	r3, r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	440b      	add	r3, r1
 800292e:	3338      	adds	r3, #56	@ 0x38
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	18d1      	adds	r1, r2, r3
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4613      	mov	r3, r2
 800293c:	011b      	lsls	r3, r3, #4
 800293e:	1a9b      	subs	r3, r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4403      	add	r3, r0
 8002944:	3338      	adds	r3, #56	@ 0x38
 8002946:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	015a      	lsls	r2, r3, #5
 800294c:	6a3b      	ldr	r3, [r7, #32]
 800294e:	4413      	add	r3, r2
 8002950:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	0cdb      	lsrs	r3, r3, #19
 8002958:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800295c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4613      	mov	r3, r2
 8002964:	011b      	lsls	r3, r3, #4
 8002966:	1a9b      	subs	r3, r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	440b      	add	r3, r1
 800296c:	3328      	adds	r3, #40	@ 0x28
 800296e:	881b      	ldrh	r3, [r3, #0]
 8002970:	461a      	mov	r2, r3
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4293      	cmp	r3, r2
 8002976:	d13f      	bne.n	80029f8 <HCD_RXQLVL_IRQHandler+0x1b4>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d03c      	beq.n	80029f8 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	015a      	lsls	r2, r3, #5
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	4413      	add	r3, r2
 8002986:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002994:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800299c:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	015a      	lsls	r2, r3, #5
 80029a2:	6a3b      	ldr	r3, [r7, #32]
 80029a4:	4413      	add	r3, r2
 80029a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029aa:	461a      	mov	r2, r3
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4613      	mov	r3, r2
 80029b6:	011b      	lsls	r3, r3, #4
 80029b8:	1a9b      	subs	r3, r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	333c      	adds	r3, #60	@ 0x3c
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	f083 0301 	eor.w	r3, r3, #1
 80029c6:	b2d8      	uxtb	r0, r3
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4613      	mov	r3, r2
 80029ce:	011b      	lsls	r3, r3, #4
 80029d0:	1a9b      	subs	r3, r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	333c      	adds	r3, #60	@ 0x3c
 80029d8:	4602      	mov	r2, r0
 80029da:	701a      	strb	r2, [r3, #0]
      break;
 80029dc:	e00c      	b.n	80029f8 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4613      	mov	r3, r2
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	1a9b      	subs	r3, r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	440b      	add	r3, r1
 80029ec:	334c      	adds	r3, #76	@ 0x4c
 80029ee:	2204      	movs	r2, #4
 80029f0:	701a      	strb	r2, [r3, #0]
      break;
 80029f2:	e001      	b.n	80029f8 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80029f4:	bf00      	nop
 80029f6:	e000      	b.n	80029fa <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80029f8:	bf00      	nop
  }
}
 80029fa:	bf00      	nop
 80029fc:	3728      	adds	r7, #40	@ 0x28
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b086      	sub	sp, #24
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8002a2e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d10b      	bne.n	8002a52 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d102      	bne.n	8002a4a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f001 f8a3 	bl	8003b90 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	f043 0302 	orr.w	r3, r3, #2
 8002a50:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f003 0308 	and.w	r3, r3, #8
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	d132      	bne.n	8002ac2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f043 0308 	orr.w	r3, r3, #8
 8002a62:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d126      	bne.n	8002abc <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	7a5b      	ldrb	r3, [r3, #9]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d113      	bne.n	8002a9e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8002a7c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a80:	d106      	bne.n	8002a90 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2102      	movs	r1, #2
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f000 fdd4 	bl	8003636 <USB_InitFSLSPClkSel>
 8002a8e:	e011      	b.n	8002ab4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2101      	movs	r1, #1
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 fdcd 	bl	8003636 <USB_InitFSLSPClkSel>
 8002a9c:	e00a      	b.n	8002ab4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	79db      	ldrb	r3, [r3, #7]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d106      	bne.n	8002ab4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002aac:	461a      	mov	r2, r3
 8002aae:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8002ab2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f001 f895 	bl	8003be4 <HAL_HCD_PortEnabled_Callback>
 8002aba:	e002      	b.n	8002ac2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f001 f89f 	bl	8003c00 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f003 0320 	and.w	r3, r3, #32
 8002ac8:	2b20      	cmp	r3, #32
 8002aca:	d103      	bne.n	8002ad4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	f043 0320 	orr.w	r3, r3, #32
 8002ad2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002ada:	461a      	mov	r2, r3
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	6013      	str	r3, [r2, #0]
}
 8002ae0:	bf00      	nop
 8002ae2:	3718      	adds	r7, #24
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e267      	b.n	8002fca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d075      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b06:	4b88      	ldr	r3, [pc, #544]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 030c 	and.w	r3, r3, #12
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	d00c      	beq.n	8002b2c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b12:	4b85      	ldr	r3, [pc, #532]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b1a:	2b08      	cmp	r3, #8
 8002b1c:	d112      	bne.n	8002b44 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b1e:	4b82      	ldr	r3, [pc, #520]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b2a:	d10b      	bne.n	8002b44 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b2c:	4b7e      	ldr	r3, [pc, #504]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d05b      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x108>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d157      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e242      	b.n	8002fca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b4c:	d106      	bne.n	8002b5c <HAL_RCC_OscConfig+0x74>
 8002b4e:	4b76      	ldr	r3, [pc, #472]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a75      	ldr	r2, [pc, #468]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002b54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b58:	6013      	str	r3, [r2, #0]
 8002b5a:	e01d      	b.n	8002b98 <HAL_RCC_OscConfig+0xb0>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b64:	d10c      	bne.n	8002b80 <HAL_RCC_OscConfig+0x98>
 8002b66:	4b70      	ldr	r3, [pc, #448]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a6f      	ldr	r2, [pc, #444]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002b6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b70:	6013      	str	r3, [r2, #0]
 8002b72:	4b6d      	ldr	r3, [pc, #436]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a6c      	ldr	r2, [pc, #432]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002b78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b7c:	6013      	str	r3, [r2, #0]
 8002b7e:	e00b      	b.n	8002b98 <HAL_RCC_OscConfig+0xb0>
 8002b80:	4b69      	ldr	r3, [pc, #420]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a68      	ldr	r2, [pc, #416]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002b86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b8a:	6013      	str	r3, [r2, #0]
 8002b8c:	4b66      	ldr	r3, [pc, #408]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a65      	ldr	r2, [pc, #404]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002b92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d013      	beq.n	8002bc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba0:	f7fd ff16 	bl	80009d0 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ba8:	f7fd ff12 	bl	80009d0 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b64      	cmp	r3, #100	@ 0x64
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e207      	b.n	8002fca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bba:	4b5b      	ldr	r3, [pc, #364]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0f0      	beq.n	8002ba8 <HAL_RCC_OscConfig+0xc0>
 8002bc6:	e014      	b.n	8002bf2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc8:	f7fd ff02 	bl	80009d0 <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bd0:	f7fd fefe 	bl	80009d0 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b64      	cmp	r3, #100	@ 0x64
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e1f3      	b.n	8002fca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002be2:	4b51      	ldr	r3, [pc, #324]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1f0      	bne.n	8002bd0 <HAL_RCC_OscConfig+0xe8>
 8002bee:	e000      	b.n	8002bf2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d063      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002bfe:	4b4a      	ldr	r3, [pc, #296]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 030c 	and.w	r3, r3, #12
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00b      	beq.n	8002c22 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c0a:	4b47      	ldr	r3, [pc, #284]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002c12:	2b08      	cmp	r3, #8
 8002c14:	d11c      	bne.n	8002c50 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c16:	4b44      	ldr	r3, [pc, #272]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d116      	bne.n	8002c50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c22:	4b41      	ldr	r3, [pc, #260]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d005      	beq.n	8002c3a <HAL_RCC_OscConfig+0x152>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d001      	beq.n	8002c3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e1c7      	b.n	8002fca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c3a:	4b3b      	ldr	r3, [pc, #236]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	4937      	ldr	r1, [pc, #220]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c4e:	e03a      	b.n	8002cc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d020      	beq.n	8002c9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c58:	4b34      	ldr	r3, [pc, #208]	@ (8002d2c <HAL_RCC_OscConfig+0x244>)
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5e:	f7fd feb7 	bl	80009d0 <HAL_GetTick>
 8002c62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c64:	e008      	b.n	8002c78 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c66:	f7fd feb3 	bl	80009d0 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e1a8      	b.n	8002fca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c78:	4b2b      	ldr	r3, [pc, #172]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0f0      	beq.n	8002c66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c84:	4b28      	ldr	r3, [pc, #160]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	4925      	ldr	r1, [pc, #148]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	600b      	str	r3, [r1, #0]
 8002c98:	e015      	b.n	8002cc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c9a:	4b24      	ldr	r3, [pc, #144]	@ (8002d2c <HAL_RCC_OscConfig+0x244>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca0:	f7fd fe96 	bl	80009d0 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ca8:	f7fd fe92 	bl	80009d0 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e187      	b.n	8002fca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cba:	4b1b      	ldr	r3, [pc, #108]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f0      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0308 	and.w	r3, r3, #8
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d036      	beq.n	8002d40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d016      	beq.n	8002d08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cda:	4b15      	ldr	r3, [pc, #84]	@ (8002d30 <HAL_RCC_OscConfig+0x248>)
 8002cdc:	2201      	movs	r2, #1
 8002cde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce0:	f7fd fe76 	bl	80009d0 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ce8:	f7fd fe72 	bl	80009d0 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e167      	b.n	8002fca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002cfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d0f0      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x200>
 8002d06:	e01b      	b.n	8002d40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d08:	4b09      	ldr	r3, [pc, #36]	@ (8002d30 <HAL_RCC_OscConfig+0x248>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d0e:	f7fd fe5f 	bl	80009d0 <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d14:	e00e      	b.n	8002d34 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d16:	f7fd fe5b 	bl	80009d0 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d907      	bls.n	8002d34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e150      	b.n	8002fca <HAL_RCC_OscConfig+0x4e2>
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	42470000 	.word	0x42470000
 8002d30:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d34:	4b88      	ldr	r3, [pc, #544]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002d36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1ea      	bne.n	8002d16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 8097 	beq.w	8002e7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d52:	4b81      	ldr	r3, [pc, #516]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10f      	bne.n	8002d7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60bb      	str	r3, [r7, #8]
 8002d62:	4b7d      	ldr	r3, [pc, #500]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d66:	4a7c      	ldr	r2, [pc, #496]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002d68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d6e:	4b7a      	ldr	r3, [pc, #488]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d76:	60bb      	str	r3, [r7, #8]
 8002d78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d7e:	4b77      	ldr	r3, [pc, #476]	@ (8002f5c <HAL_RCC_OscConfig+0x474>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d118      	bne.n	8002dbc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d8a:	4b74      	ldr	r3, [pc, #464]	@ (8002f5c <HAL_RCC_OscConfig+0x474>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a73      	ldr	r2, [pc, #460]	@ (8002f5c <HAL_RCC_OscConfig+0x474>)
 8002d90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d96:	f7fd fe1b 	bl	80009d0 <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d9c:	e008      	b.n	8002db0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d9e:	f7fd fe17 	bl	80009d0 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e10c      	b.n	8002fca <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db0:	4b6a      	ldr	r3, [pc, #424]	@ (8002f5c <HAL_RCC_OscConfig+0x474>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0f0      	beq.n	8002d9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d106      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x2ea>
 8002dc4:	4b64      	ldr	r3, [pc, #400]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002dc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dc8:	4a63      	ldr	r2, [pc, #396]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002dca:	f043 0301 	orr.w	r3, r3, #1
 8002dce:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dd0:	e01c      	b.n	8002e0c <HAL_RCC_OscConfig+0x324>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	2b05      	cmp	r3, #5
 8002dd8:	d10c      	bne.n	8002df4 <HAL_RCC_OscConfig+0x30c>
 8002dda:	4b5f      	ldr	r3, [pc, #380]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dde:	4a5e      	ldr	r2, [pc, #376]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002de0:	f043 0304 	orr.w	r3, r3, #4
 8002de4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002de6:	4b5c      	ldr	r3, [pc, #368]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dea:	4a5b      	ldr	r2, [pc, #364]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002dec:	f043 0301 	orr.w	r3, r3, #1
 8002df0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002df2:	e00b      	b.n	8002e0c <HAL_RCC_OscConfig+0x324>
 8002df4:	4b58      	ldr	r3, [pc, #352]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002df6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002df8:	4a57      	ldr	r2, [pc, #348]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002dfa:	f023 0301 	bic.w	r3, r3, #1
 8002dfe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e00:	4b55      	ldr	r3, [pc, #340]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002e02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e04:	4a54      	ldr	r2, [pc, #336]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002e06:	f023 0304 	bic.w	r3, r3, #4
 8002e0a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d015      	beq.n	8002e40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e14:	f7fd fddc 	bl	80009d0 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e1a:	e00a      	b.n	8002e32 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e1c:	f7fd fdd8 	bl	80009d0 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e0cb      	b.n	8002fca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e32:	4b49      	ldr	r3, [pc, #292]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002e34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d0ee      	beq.n	8002e1c <HAL_RCC_OscConfig+0x334>
 8002e3e:	e014      	b.n	8002e6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e40:	f7fd fdc6 	bl	80009d0 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e46:	e00a      	b.n	8002e5e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e48:	f7fd fdc2 	bl	80009d0 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e0b5      	b.n	8002fca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e5e:	4b3e      	ldr	r3, [pc, #248]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1ee      	bne.n	8002e48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e6a:	7dfb      	ldrb	r3, [r7, #23]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d105      	bne.n	8002e7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e70:	4b39      	ldr	r3, [pc, #228]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e74:	4a38      	ldr	r2, [pc, #224]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002e76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e7a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f000 80a1 	beq.w	8002fc8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e86:	4b34      	ldr	r3, [pc, #208]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 030c 	and.w	r3, r3, #12
 8002e8e:	2b08      	cmp	r3, #8
 8002e90:	d05c      	beq.n	8002f4c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d141      	bne.n	8002f1e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e9a:	4b31      	ldr	r3, [pc, #196]	@ (8002f60 <HAL_RCC_OscConfig+0x478>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea0:	f7fd fd96 	bl	80009d0 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea8:	f7fd fd92 	bl	80009d0 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e087      	b.n	8002fca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eba:	4b27      	ldr	r3, [pc, #156]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1f0      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69da      	ldr	r2, [r3, #28]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed4:	019b      	lsls	r3, r3, #6
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002edc:	085b      	lsrs	r3, r3, #1
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	041b      	lsls	r3, r3, #16
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee8:	061b      	lsls	r3, r3, #24
 8002eea:	491b      	ldr	r1, [pc, #108]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ef0:	4b1b      	ldr	r3, [pc, #108]	@ (8002f60 <HAL_RCC_OscConfig+0x478>)
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef6:	f7fd fd6b 	bl	80009d0 <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002efc:	e008      	b.n	8002f10 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002efe:	f7fd fd67 	bl	80009d0 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e05c      	b.n	8002fca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f10:	4b11      	ldr	r3, [pc, #68]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0f0      	beq.n	8002efe <HAL_RCC_OscConfig+0x416>
 8002f1c:	e054      	b.n	8002fc8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f1e:	4b10      	ldr	r3, [pc, #64]	@ (8002f60 <HAL_RCC_OscConfig+0x478>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f24:	f7fd fd54 	bl	80009d0 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f2c:	f7fd fd50 	bl	80009d0 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e045      	b.n	8002fca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f3e:	4b06      	ldr	r3, [pc, #24]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f0      	bne.n	8002f2c <HAL_RCC_OscConfig+0x444>
 8002f4a:	e03d      	b.n	8002fc8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d107      	bne.n	8002f64 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e038      	b.n	8002fca <HAL_RCC_OscConfig+0x4e2>
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	40007000 	.word	0x40007000
 8002f60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f64:	4b1b      	ldr	r3, [pc, #108]	@ (8002fd4 <HAL_RCC_OscConfig+0x4ec>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d028      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d121      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d11a      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f94:	4013      	ands	r3, r2
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d111      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002faa:	085b      	lsrs	r3, r3, #1
 8002fac:	3b01      	subs	r3, #1
 8002fae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d107      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d001      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e000      	b.n	8002fca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40023800 	.word	0x40023800

08002fd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d101      	bne.n	8002fec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e0cc      	b.n	8003186 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fec:	4b68      	ldr	r3, [pc, #416]	@ (8003190 <HAL_RCC_ClockConfig+0x1b8>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d90c      	bls.n	8003014 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ffa:	4b65      	ldr	r3, [pc, #404]	@ (8003190 <HAL_RCC_ClockConfig+0x1b8>)
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003002:	4b63      	ldr	r3, [pc, #396]	@ (8003190 <HAL_RCC_ClockConfig+0x1b8>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	429a      	cmp	r2, r3
 800300e:	d001      	beq.n	8003014 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e0b8      	b.n	8003186 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d020      	beq.n	8003062 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b00      	cmp	r3, #0
 800302a:	d005      	beq.n	8003038 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800302c:	4b59      	ldr	r3, [pc, #356]	@ (8003194 <HAL_RCC_ClockConfig+0x1bc>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	4a58      	ldr	r2, [pc, #352]	@ (8003194 <HAL_RCC_ClockConfig+0x1bc>)
 8003032:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003036:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0308 	and.w	r3, r3, #8
 8003040:	2b00      	cmp	r3, #0
 8003042:	d005      	beq.n	8003050 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003044:	4b53      	ldr	r3, [pc, #332]	@ (8003194 <HAL_RCC_ClockConfig+0x1bc>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	4a52      	ldr	r2, [pc, #328]	@ (8003194 <HAL_RCC_ClockConfig+0x1bc>)
 800304a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800304e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003050:	4b50      	ldr	r3, [pc, #320]	@ (8003194 <HAL_RCC_ClockConfig+0x1bc>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	494d      	ldr	r1, [pc, #308]	@ (8003194 <HAL_RCC_ClockConfig+0x1bc>)
 800305e:	4313      	orrs	r3, r2
 8003060:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	d044      	beq.n	80030f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d107      	bne.n	8003086 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003076:	4b47      	ldr	r3, [pc, #284]	@ (8003194 <HAL_RCC_ClockConfig+0x1bc>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d119      	bne.n	80030b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e07f      	b.n	8003186 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2b02      	cmp	r3, #2
 800308c:	d003      	beq.n	8003096 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003092:	2b03      	cmp	r3, #3
 8003094:	d107      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003096:	4b3f      	ldr	r3, [pc, #252]	@ (8003194 <HAL_RCC_ClockConfig+0x1bc>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d109      	bne.n	80030b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e06f      	b.n	8003186 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a6:	4b3b      	ldr	r3, [pc, #236]	@ (8003194 <HAL_RCC_ClockConfig+0x1bc>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e067      	b.n	8003186 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030b6:	4b37      	ldr	r3, [pc, #220]	@ (8003194 <HAL_RCC_ClockConfig+0x1bc>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f023 0203 	bic.w	r2, r3, #3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	4934      	ldr	r1, [pc, #208]	@ (8003194 <HAL_RCC_ClockConfig+0x1bc>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030c8:	f7fd fc82 	bl	80009d0 <HAL_GetTick>
 80030cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ce:	e00a      	b.n	80030e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030d0:	f7fd fc7e 	bl	80009d0 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030de:	4293      	cmp	r3, r2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e04f      	b.n	8003186 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030e6:	4b2b      	ldr	r3, [pc, #172]	@ (8003194 <HAL_RCC_ClockConfig+0x1bc>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 020c 	and.w	r2, r3, #12
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d1eb      	bne.n	80030d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030f8:	4b25      	ldr	r3, [pc, #148]	@ (8003190 <HAL_RCC_ClockConfig+0x1b8>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	429a      	cmp	r2, r3
 8003104:	d20c      	bcs.n	8003120 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003106:	4b22      	ldr	r3, [pc, #136]	@ (8003190 <HAL_RCC_ClockConfig+0x1b8>)
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	b2d2      	uxtb	r2, r2
 800310c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800310e:	4b20      	ldr	r3, [pc, #128]	@ (8003190 <HAL_RCC_ClockConfig+0x1b8>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	429a      	cmp	r2, r3
 800311a:	d001      	beq.n	8003120 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e032      	b.n	8003186 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	d008      	beq.n	800313e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800312c:	4b19      	ldr	r3, [pc, #100]	@ (8003194 <HAL_RCC_ClockConfig+0x1bc>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	4916      	ldr	r1, [pc, #88]	@ (8003194 <HAL_RCC_ClockConfig+0x1bc>)
 800313a:	4313      	orrs	r3, r2
 800313c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0308 	and.w	r3, r3, #8
 8003146:	2b00      	cmp	r3, #0
 8003148:	d009      	beq.n	800315e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800314a:	4b12      	ldr	r3, [pc, #72]	@ (8003194 <HAL_RCC_ClockConfig+0x1bc>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	490e      	ldr	r1, [pc, #56]	@ (8003194 <HAL_RCC_ClockConfig+0x1bc>)
 800315a:	4313      	orrs	r3, r2
 800315c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800315e:	f000 f82d 	bl	80031bc <HAL_RCC_GetSysClockFreq>
 8003162:	4602      	mov	r2, r0
 8003164:	4b0b      	ldr	r3, [pc, #44]	@ (8003194 <HAL_RCC_ClockConfig+0x1bc>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	091b      	lsrs	r3, r3, #4
 800316a:	f003 030f 	and.w	r3, r3, #15
 800316e:	490a      	ldr	r1, [pc, #40]	@ (8003198 <HAL_RCC_ClockConfig+0x1c0>)
 8003170:	5ccb      	ldrb	r3, [r1, r3]
 8003172:	fa22 f303 	lsr.w	r3, r2, r3
 8003176:	4a09      	ldr	r2, [pc, #36]	@ (800319c <HAL_RCC_ClockConfig+0x1c4>)
 8003178:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800317a:	4b09      	ldr	r3, [pc, #36]	@ (80031a0 <HAL_RCC_ClockConfig+0x1c8>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f7fd fbe2 	bl	8000948 <HAL_InitTick>

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40023c00 	.word	0x40023c00
 8003194:	40023800 	.word	0x40023800
 8003198:	08003d1c 	.word	0x08003d1c
 800319c:	20000000 	.word	0x20000000
 80031a0:	20000004 	.word	0x20000004

080031a4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80031a8:	4b03      	ldr	r3, [pc, #12]	@ (80031b8 <HAL_RCC_EnableCSS+0x14>)
 80031aa:	2201      	movs	r2, #1
 80031ac:	601a      	str	r2, [r3, #0]
}
 80031ae:	bf00      	nop
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	4247004c 	.word	0x4247004c

080031bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031c0:	b094      	sub	sp, #80	@ 0x50
 80031c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80031cc:	2300      	movs	r3, #0
 80031ce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80031d0:	2300      	movs	r3, #0
 80031d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031d4:	4b79      	ldr	r3, [pc, #484]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x200>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 030c 	and.w	r3, r3, #12
 80031dc:	2b08      	cmp	r3, #8
 80031de:	d00d      	beq.n	80031fc <HAL_RCC_GetSysClockFreq+0x40>
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	f200 80e1 	bhi.w	80033a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d002      	beq.n	80031f0 <HAL_RCC_GetSysClockFreq+0x34>
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	d003      	beq.n	80031f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80031ee:	e0db      	b.n	80033a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031f0:	4b73      	ldr	r3, [pc, #460]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80031f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80031f4:	e0db      	b.n	80033ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031f6:	4b73      	ldr	r3, [pc, #460]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80031f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80031fa:	e0d8      	b.n	80033ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031fc:	4b6f      	ldr	r3, [pc, #444]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x200>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003204:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003206:	4b6d      	ldr	r3, [pc, #436]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x200>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d063      	beq.n	80032da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003212:	4b6a      	ldr	r3, [pc, #424]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x200>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	099b      	lsrs	r3, r3, #6
 8003218:	2200      	movs	r2, #0
 800321a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800321c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800321e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003224:	633b      	str	r3, [r7, #48]	@ 0x30
 8003226:	2300      	movs	r3, #0
 8003228:	637b      	str	r3, [r7, #52]	@ 0x34
 800322a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800322e:	4622      	mov	r2, r4
 8003230:	462b      	mov	r3, r5
 8003232:	f04f 0000 	mov.w	r0, #0
 8003236:	f04f 0100 	mov.w	r1, #0
 800323a:	0159      	lsls	r1, r3, #5
 800323c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003240:	0150      	lsls	r0, r2, #5
 8003242:	4602      	mov	r2, r0
 8003244:	460b      	mov	r3, r1
 8003246:	4621      	mov	r1, r4
 8003248:	1a51      	subs	r1, r2, r1
 800324a:	6139      	str	r1, [r7, #16]
 800324c:	4629      	mov	r1, r5
 800324e:	eb63 0301 	sbc.w	r3, r3, r1
 8003252:	617b      	str	r3, [r7, #20]
 8003254:	f04f 0200 	mov.w	r2, #0
 8003258:	f04f 0300 	mov.w	r3, #0
 800325c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003260:	4659      	mov	r1, fp
 8003262:	018b      	lsls	r3, r1, #6
 8003264:	4651      	mov	r1, sl
 8003266:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800326a:	4651      	mov	r1, sl
 800326c:	018a      	lsls	r2, r1, #6
 800326e:	4651      	mov	r1, sl
 8003270:	ebb2 0801 	subs.w	r8, r2, r1
 8003274:	4659      	mov	r1, fp
 8003276:	eb63 0901 	sbc.w	r9, r3, r1
 800327a:	f04f 0200 	mov.w	r2, #0
 800327e:	f04f 0300 	mov.w	r3, #0
 8003282:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003286:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800328a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800328e:	4690      	mov	r8, r2
 8003290:	4699      	mov	r9, r3
 8003292:	4623      	mov	r3, r4
 8003294:	eb18 0303 	adds.w	r3, r8, r3
 8003298:	60bb      	str	r3, [r7, #8]
 800329a:	462b      	mov	r3, r5
 800329c:	eb49 0303 	adc.w	r3, r9, r3
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	f04f 0200 	mov.w	r2, #0
 80032a6:	f04f 0300 	mov.w	r3, #0
 80032aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032ae:	4629      	mov	r1, r5
 80032b0:	024b      	lsls	r3, r1, #9
 80032b2:	4621      	mov	r1, r4
 80032b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032b8:	4621      	mov	r1, r4
 80032ba:	024a      	lsls	r2, r1, #9
 80032bc:	4610      	mov	r0, r2
 80032be:	4619      	mov	r1, r3
 80032c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032c2:	2200      	movs	r2, #0
 80032c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80032cc:	f7fc ff7c 	bl	80001c8 <__aeabi_uldivmod>
 80032d0:	4602      	mov	r2, r0
 80032d2:	460b      	mov	r3, r1
 80032d4:	4613      	mov	r3, r2
 80032d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032d8:	e058      	b.n	800338c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032da:	4b38      	ldr	r3, [pc, #224]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x200>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	099b      	lsrs	r3, r3, #6
 80032e0:	2200      	movs	r2, #0
 80032e2:	4618      	mov	r0, r3
 80032e4:	4611      	mov	r1, r2
 80032e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032ea:	623b      	str	r3, [r7, #32]
 80032ec:	2300      	movs	r3, #0
 80032ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80032f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032f4:	4642      	mov	r2, r8
 80032f6:	464b      	mov	r3, r9
 80032f8:	f04f 0000 	mov.w	r0, #0
 80032fc:	f04f 0100 	mov.w	r1, #0
 8003300:	0159      	lsls	r1, r3, #5
 8003302:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003306:	0150      	lsls	r0, r2, #5
 8003308:	4602      	mov	r2, r0
 800330a:	460b      	mov	r3, r1
 800330c:	4641      	mov	r1, r8
 800330e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003312:	4649      	mov	r1, r9
 8003314:	eb63 0b01 	sbc.w	fp, r3, r1
 8003318:	f04f 0200 	mov.w	r2, #0
 800331c:	f04f 0300 	mov.w	r3, #0
 8003320:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003324:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003328:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800332c:	ebb2 040a 	subs.w	r4, r2, sl
 8003330:	eb63 050b 	sbc.w	r5, r3, fp
 8003334:	f04f 0200 	mov.w	r2, #0
 8003338:	f04f 0300 	mov.w	r3, #0
 800333c:	00eb      	lsls	r3, r5, #3
 800333e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003342:	00e2      	lsls	r2, r4, #3
 8003344:	4614      	mov	r4, r2
 8003346:	461d      	mov	r5, r3
 8003348:	4643      	mov	r3, r8
 800334a:	18e3      	adds	r3, r4, r3
 800334c:	603b      	str	r3, [r7, #0]
 800334e:	464b      	mov	r3, r9
 8003350:	eb45 0303 	adc.w	r3, r5, r3
 8003354:	607b      	str	r3, [r7, #4]
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003362:	4629      	mov	r1, r5
 8003364:	028b      	lsls	r3, r1, #10
 8003366:	4621      	mov	r1, r4
 8003368:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800336c:	4621      	mov	r1, r4
 800336e:	028a      	lsls	r2, r1, #10
 8003370:	4610      	mov	r0, r2
 8003372:	4619      	mov	r1, r3
 8003374:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003376:	2200      	movs	r2, #0
 8003378:	61bb      	str	r3, [r7, #24]
 800337a:	61fa      	str	r2, [r7, #28]
 800337c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003380:	f7fc ff22 	bl	80001c8 <__aeabi_uldivmod>
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	4613      	mov	r3, r2
 800338a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800338c:	4b0b      	ldr	r3, [pc, #44]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x200>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	0c1b      	lsrs	r3, r3, #16
 8003392:	f003 0303 	and.w	r3, r3, #3
 8003396:	3301      	adds	r3, #1
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800339c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800339e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033a6:	e002      	b.n	80033ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033a8:	4b05      	ldr	r3, [pc, #20]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80033aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3750      	adds	r7, #80	@ 0x50
 80033b4:	46bd      	mov	sp, r7
 80033b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ba:	bf00      	nop
 80033bc:	40023800 	.word	0x40023800
 80033c0:	00f42400 	.word	0x00f42400
 80033c4:	007a1200 	.word	0x007a1200

080033c8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80033cc:	4b06      	ldr	r3, [pc, #24]	@ (80033e8 <HAL_RCC_NMI_IRQHandler+0x20>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033d4:	2b80      	cmp	r3, #128	@ 0x80
 80033d6:	d104      	bne.n	80033e2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80033d8:	f000 f80a 	bl	80033f0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80033dc:	4b03      	ldr	r3, [pc, #12]	@ (80033ec <HAL_RCC_NMI_IRQHandler+0x24>)
 80033de:	2280      	movs	r2, #128	@ 0x80
 80033e0:	701a      	strb	r2, [r3, #0]
  }
}
 80033e2:	bf00      	nop
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	40023800 	.word	0x40023800
 80033ec:	4002380e 	.word	0x4002380e

080033f0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80033f4:	bf00      	nop
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr

080033fe <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80033fe:	b480      	push	{r7}
 8003400:	b083      	sub	sp, #12
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f043 0201 	orr.w	r2, r3, #1
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f023 0201 	bic.w	r2, r3, #1
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003442:	b480      	push	{r7}
 8003444:	b085      	sub	sp, #20
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
 800344a:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800344c:	2300      	movs	r3, #0
 800344e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	3301      	adds	r3, #1
 8003454:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800345c:	d901      	bls.n	8003462 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e01b      	b.n	800349a <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	2b00      	cmp	r3, #0
 8003468:	daf2      	bge.n	8003450 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800346a:	2300      	movs	r3, #0
 800346c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	019b      	lsls	r3, r3, #6
 8003472:	f043 0220 	orr.w	r2, r3, #32
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	3301      	adds	r3, #1
 800347e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003486:	d901      	bls.n	800348c <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e006      	b.n	800349a <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	f003 0320 	and.w	r3, r3, #32
 8003494:	2b20      	cmp	r3, #32
 8003496:	d0f0      	beq.n	800347a <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b085      	sub	sp, #20
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	3301      	adds	r3, #1
 80034b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80034be:	d901      	bls.n	80034c4 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e018      	b.n	80034f6 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	daf2      	bge.n	80034b2 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80034cc:	2300      	movs	r3, #0
 80034ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2210      	movs	r2, #16
 80034d4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	3301      	adds	r3, #1
 80034da:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80034e2:	d901      	bls.n	80034e8 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e006      	b.n	80034f6 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	f003 0310 	and.w	r3, r3, #16
 80034f0:	2b10      	cmp	r3, #16
 80034f2:	d0f0      	beq.n	80034d6 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003502:	b480      	push	{r7}
 8003504:	b08b      	sub	sp, #44	@ 0x2c
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	4613      	mov	r3, r2
 800350e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003518:	88fb      	ldrh	r3, [r7, #6]
 800351a:	089b      	lsrs	r3, r3, #2
 800351c:	b29b      	uxth	r3, r3
 800351e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003520:	88fb      	ldrh	r3, [r7, #6]
 8003522:	f003 0303 	and.w	r3, r3, #3
 8003526:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003528:	2300      	movs	r3, #0
 800352a:	623b      	str	r3, [r7, #32]
 800352c:	e014      	b.n	8003558 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003538:	601a      	str	r2, [r3, #0]
    pDest++;
 800353a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353c:	3301      	adds	r3, #1
 800353e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003542:	3301      	adds	r3, #1
 8003544:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003548:	3301      	adds	r3, #1
 800354a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800354c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354e:	3301      	adds	r3, #1
 8003550:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	3301      	adds	r3, #1
 8003556:	623b      	str	r3, [r7, #32]
 8003558:	6a3a      	ldr	r2, [r7, #32]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	429a      	cmp	r2, r3
 800355e:	d3e6      	bcc.n	800352e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003560:	8bfb      	ldrh	r3, [r7, #30]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d01e      	beq.n	80035a4 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003566:	2300      	movs	r3, #0
 8003568:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003570:	461a      	mov	r2, r3
 8003572:	f107 0310 	add.w	r3, r7, #16
 8003576:	6812      	ldr	r2, [r2, #0]
 8003578:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	6a3b      	ldr	r3, [r7, #32]
 800357e:	b2db      	uxtb	r3, r3
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	fa22 f303 	lsr.w	r3, r2, r3
 8003586:	b2da      	uxtb	r2, r3
 8003588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358a:	701a      	strb	r2, [r3, #0]
      i++;
 800358c:	6a3b      	ldr	r3, [r7, #32]
 800358e:	3301      	adds	r3, #1
 8003590:	623b      	str	r3, [r7, #32]
      pDest++;
 8003592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003594:	3301      	adds	r3, #1
 8003596:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8003598:	8bfb      	ldrh	r3, [r7, #30]
 800359a:	3b01      	subs	r3, #1
 800359c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800359e:	8bfb      	ldrh	r3, [r7, #30]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1ea      	bne.n	800357a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80035a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	372c      	adds	r7, #44	@ 0x2c
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b085      	sub	sp, #20
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	4013      	ands	r3, r2
 80035c8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80035ca:	68fb      	ldr	r3, [r7, #12]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	460b      	mov	r3, r1
 80035e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80035e8:	78fb      	ldrb	r3, [r7, #3]
 80035ea:	015a      	lsls	r2, r3, #5
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80035f8:	78fb      	ldrb	r3, [r7, #3]
 80035fa:	015a      	lsls	r2, r3, #5
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4413      	add	r3, r2
 8003600:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	4013      	ands	r3, r2
 800360a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800360c:	68bb      	ldr	r3, [r7, #8]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3714      	adds	r7, #20
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800361a:	b480      	push	{r7}
 800361c:	b083      	sub	sp, #12
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	f003 0301 	and.w	r3, r3, #1
}
 800362a:	4618      	mov	r0, r3
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8003636:	b480      	push	{r7}
 8003638:	b085      	sub	sp, #20
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
 800363e:	460b      	mov	r3, r1
 8003640:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003654:	f023 0303 	bic.w	r3, r3, #3
 8003658:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	78fb      	ldrb	r3, [r7, #3]
 8003664:	f003 0303 	and.w	r3, r3, #3
 8003668:	68f9      	ldr	r1, [r7, #12]
 800366a:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800366e:	4313      	orrs	r3, r2
 8003670:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8003672:	78fb      	ldrb	r3, [r7, #3]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d107      	bne.n	8003688 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800367e:	461a      	mov	r2, r3
 8003680:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8003684:	6053      	str	r3, [r2, #4]
 8003686:	e00c      	b.n	80036a2 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8003688:	78fb      	ldrb	r3, [r7, #3]
 800368a:	2b02      	cmp	r3, #2
 800368c:	d107      	bne.n	800369e <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003694:	461a      	mov	r2, r3
 8003696:	f241 7370 	movw	r3, #6000	@ 0x1770
 800369a:	6053      	str	r3, [r2, #4]
 800369c:	e001      	b.n	80036a2 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e000      	b.n	80036a4 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3714      	adds	r7, #20
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	b29b      	uxth	r3, r3
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80036d2:	b480      	push	{r7}
 80036d4:	b089      	sub	sp, #36	@ 0x24
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
 80036da:	460b      	mov	r3, r1
 80036dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80036e2:	78fb      	ldrb	r3, [r7, #3]
 80036e4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	015a      	lsls	r2, r3, #5
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	4413      	add	r3, r2
 80036f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	0c9b      	lsrs	r3, r3, #18
 80036fa:	f003 0303 	and.w	r3, r3, #3
 80036fe:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	015a      	lsls	r2, r3, #5
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	4413      	add	r3, r2
 8003708:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	0fdb      	lsrs	r3, r3, #31
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	015a      	lsls	r2, r3, #5
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	4413      	add	r3, r2
 800371e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	0fdb      	lsrs	r3, r3, #31
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f003 0320 	and.w	r3, r3, #32
 8003734:	2b20      	cmp	r3, #32
 8003736:	d10d      	bne.n	8003754 <USB_HC_Halt+0x82>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10a      	bne.n	8003754 <USB_HC_Halt+0x82>
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d005      	beq.n	8003750 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d002      	beq.n	8003750 <USB_HC_Halt+0x7e>
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	2b03      	cmp	r3, #3
 800374e:	d101      	bne.n	8003754 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8003750:	2300      	movs	r3, #0
 8003752:	e0d8      	b.n	8003906 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d002      	beq.n	8003760 <USB_HC_Halt+0x8e>
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2b02      	cmp	r3, #2
 800375e:	d173      	bne.n	8003848 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	015a      	lsls	r2, r3, #5
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	4413      	add	r3, r2
 8003768:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	0151      	lsls	r1, r2, #5
 8003772:	69fa      	ldr	r2, [r7, #28]
 8003774:	440a      	add	r2, r1
 8003776:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800377a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800377e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f003 0320 	and.w	r3, r3, #32
 8003788:	2b00      	cmp	r3, #0
 800378a:	d14a      	bne.n	8003822 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003790:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d133      	bne.n	8003800 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	015a      	lsls	r2, r3, #5
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	4413      	add	r3, r2
 80037a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	0151      	lsls	r1, r2, #5
 80037aa:	69fa      	ldr	r2, [r7, #28]
 80037ac:	440a      	add	r2, r1
 80037ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80037b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80037b6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	015a      	lsls	r2, r3, #5
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	4413      	add	r3, r2
 80037c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	0151      	lsls	r1, r2, #5
 80037ca:	69fa      	ldr	r2, [r7, #28]
 80037cc:	440a      	add	r2, r1
 80037ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80037d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80037d6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	3301      	adds	r3, #1
 80037dc:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80037e4:	d82e      	bhi.n	8003844 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	015a      	lsls	r2, r3, #5
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	4413      	add	r3, r2
 80037ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80037f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80037fc:	d0ec      	beq.n	80037d8 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80037fe:	e081      	b.n	8003904 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	015a      	lsls	r2, r3, #5
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	4413      	add	r3, r2
 8003808:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	0151      	lsls	r1, r2, #5
 8003812:	69fa      	ldr	r2, [r7, #28]
 8003814:	440a      	add	r2, r1
 8003816:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800381a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800381e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003820:	e070      	b.n	8003904 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	015a      	lsls	r2, r3, #5
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	4413      	add	r3, r2
 800382a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	0151      	lsls	r1, r2, #5
 8003834:	69fa      	ldr	r2, [r7, #28]
 8003836:	440a      	add	r2, r1
 8003838:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800383c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003840:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003842:	e05f      	b.n	8003904 <USB_HC_Halt+0x232>
            break;
 8003844:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003846:	e05d      	b.n	8003904 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	015a      	lsls	r2, r3, #5
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	4413      	add	r3, r2
 8003850:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	0151      	lsls	r1, r2, #5
 800385a:	69fa      	ldr	r2, [r7, #28]
 800385c:	440a      	add	r2, r1
 800385e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003862:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003866:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d133      	bne.n	80038e0 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	015a      	lsls	r2, r3, #5
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	4413      	add	r3, r2
 8003880:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	0151      	lsls	r1, r2, #5
 800388a:	69fa      	ldr	r2, [r7, #28]
 800388c:	440a      	add	r2, r1
 800388e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003892:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003896:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	015a      	lsls	r2, r3, #5
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	4413      	add	r3, r2
 80038a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	0151      	lsls	r1, r2, #5
 80038aa:	69fa      	ldr	r2, [r7, #28]
 80038ac:	440a      	add	r2, r1
 80038ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80038b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80038b6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	3301      	adds	r3, #1
 80038bc:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80038c4:	d81d      	bhi.n	8003902 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	015a      	lsls	r2, r3, #5
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	4413      	add	r3, r2
 80038ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80038d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80038dc:	d0ec      	beq.n	80038b8 <USB_HC_Halt+0x1e6>
 80038de:	e011      	b.n	8003904 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	015a      	lsls	r2, r3, #5
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	4413      	add	r3, r2
 80038e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	0151      	lsls	r1, r2, #5
 80038f2:	69fa      	ldr	r2, [r7, #28]
 80038f4:	440a      	add	r2, r1
 80038f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80038fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80038fe:	6013      	str	r3, [r2, #0]
 8003900:	e000      	b.n	8003904 <USB_HC_Halt+0x232>
          break;
 8003902:	bf00      	nop
    }
  }

  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3724      	adds	r7, #36	@ 0x24
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b088      	sub	sp, #32
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8003922:	2300      	movs	r3, #0
 8003924:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7ff fd7a 	bl	8003420 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800392c:	2110      	movs	r1, #16
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7ff fd87 	bl	8003442 <USB_FlushTxFifo>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7ff fdb1 	bl	80034a6 <USB_FlushRxFifo>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800394e:	2300      	movs	r3, #0
 8003950:	61bb      	str	r3, [r7, #24]
 8003952:	e01f      	b.n	8003994 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	4413      	add	r3, r2
 800395c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800396a:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003972:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800397a:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	015a      	lsls	r2, r3, #5
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	4413      	add	r3, r2
 8003984:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003988:	461a      	mov	r2, r3
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	3301      	adds	r3, #1
 8003992:	61bb      	str	r3, [r7, #24]
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	2b0f      	cmp	r3, #15
 8003998:	d9dc      	bls.n	8003954 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800399a:	2300      	movs	r3, #0
 800399c:	61bb      	str	r3, [r7, #24]
 800399e:	e034      	b.n	8003a0a <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	015a      	lsls	r2, r3, #5
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	4413      	add	r3, r2
 80039a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80039b6:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80039be:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80039c6:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	015a      	lsls	r2, r3, #5
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	4413      	add	r3, r2
 80039d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039d4:	461a      	mov	r2, r3
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	3301      	adds	r3, #1
 80039de:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80039e6:	d80c      	bhi.n	8003a02 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	015a      	lsls	r2, r3, #5
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	4413      	add	r3, r2
 80039f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80039fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80039fe:	d0ec      	beq.n	80039da <USB_StopHost+0xc8>
 8003a00:	e000      	b.n	8003a04 <USB_StopHost+0xf2>
        break;
 8003a02:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	3301      	adds	r3, #1
 8003a08:	61bb      	str	r3, [r7, #24]
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	2b0f      	cmp	r3, #15
 8003a0e:	d9c7      	bls.n	80039a0 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003a16:	461a      	mov	r2, r3
 8003a18:	f04f 33ff 	mov.w	r3, #4294967295
 8003a1c:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f04f 32ff 	mov.w	r2, #4294967295
 8003a24:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7ff fce9 	bl	80033fe <USB_EnableGlobalInt>

  return ret;
 8003a2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3720      	adds	r7, #32
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b082      	sub	sp, #8
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8003a44:	1c5a      	adds	r2, r3, #1
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 f804 	bl	8003a5a <USBH_HandleSof>
}
 8003a52:	bf00      	nop
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b082      	sub	sp, #8
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b0b      	cmp	r3, #11
 8003a6a:	d10a      	bne.n	8003a82 <USBH_HandleSof+0x28>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d005      	beq.n	8003a82 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	4798      	blx	r3
  }
}
 8003a82:	bf00      	nop
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b083      	sub	sp, #12
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8003a9a:	bf00      	nop
}
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b083      	sub	sp, #12
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8003ab6:	bf00      	nop
}
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr

08003ac2 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8003ac2:	b480      	push	{r7}
 8003ac4:	b083      	sub	sp, #12
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f883 	bl	8003c1c <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	791b      	ldrb	r3, [r3, #4]
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 f80b 	bl	8003b38 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	795b      	ldrb	r3, [r3, #5]
 8003b26:	4619      	mov	r1, r3
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f805 	bl	8003b38 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	460b      	mov	r3, r1
 8003b42:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8003b44:	78fb      	ldrb	r3, [r7, #3]
 8003b46:	2b0f      	cmp	r3, #15
 8003b48:	d80d      	bhi.n	8003b66 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8003b4a:	78fb      	ldrb	r3, [r7, #3]
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	33e0      	adds	r3, #224	@ 0xe0
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4413      	add	r3, r2
 8003b54:	685a      	ldr	r2, [r3, #4]
 8003b56:	78fb      	ldrb	r3, [r7, #3]
 8003b58:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	33e0      	adds	r3, #224	@ 0xe0
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	440b      	add	r3, r1
 8003b64:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7ff ff57 	bl	8003a36 <USBH_LL_IncTimer>
}
 8003b88:	bf00      	nop
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7ff ff8f 	bl	8003ac2 <USBH_LL_Connect>
}
 8003ba4:	bf00      	nop
 8003ba6:	3708      	adds	r7, #8
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7ff ff98 	bl	8003af0 <USBH_LL_Disconnect>
}
 8003bc0:	bf00      	nop
 8003bc2:	3708      	adds	r7, #8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	70fb      	strb	r3, [r7, #3]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7ff ff49 	bl	8003a8a <USBH_LL_PortEnabled>
}
 8003bf8:	bf00      	nop
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7ff ff49 	bl	8003aa6 <USBH_LL_PortDisabled>
}
 8003c14:	bf00      	nop
 8003c16:	3708      	adds	r7, #8
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fd fac1 	bl	80011ba <HAL_HCD_Stop>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8003c3c:	7bfb      	ldrb	r3, [r7, #15]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 f808 	bl	8003c54 <USBH_Get_USB_Status>
 8003c44:	4603      	mov	r3, r0
 8003c46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8003c48:	7bbb      	ldrb	r3, [r7, #14]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
	...

08003c54 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8003c62:	79fb      	ldrb	r3, [r7, #7]
 8003c64:	2b03      	cmp	r3, #3
 8003c66:	d817      	bhi.n	8003c98 <USBH_Get_USB_Status+0x44>
 8003c68:	a201      	add	r2, pc, #4	@ (adr r2, 8003c70 <USBH_Get_USB_Status+0x1c>)
 8003c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6e:	bf00      	nop
 8003c70:	08003c81 	.word	0x08003c81
 8003c74:	08003c87 	.word	0x08003c87
 8003c78:	08003c8d 	.word	0x08003c8d
 8003c7c:	08003c93 	.word	0x08003c93
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8003c80:	2300      	movs	r3, #0
 8003c82:	73fb      	strb	r3, [r7, #15]
    break;
 8003c84:	e00b      	b.n	8003c9e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8003c86:	2302      	movs	r3, #2
 8003c88:	73fb      	strb	r3, [r7, #15]
    break;
 8003c8a:	e008      	b.n	8003c9e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	73fb      	strb	r3, [r7, #15]
    break;
 8003c90:	e005      	b.n	8003c9e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8003c92:	2302      	movs	r3, #2
 8003c94:	73fb      	strb	r3, [r7, #15]
    break;
 8003c96:	e002      	b.n	8003c9e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8003c98:	2302      	movs	r3, #2
 8003c9a:	73fb      	strb	r3, [r7, #15]
    break;
 8003c9c:	bf00      	nop
  }
  return usb_status;
 8003c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3714      	adds	r7, #20
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <memset>:
 8003cac:	4402      	add	r2, r0
 8003cae:	4603      	mov	r3, r0
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d100      	bne.n	8003cb6 <memset+0xa>
 8003cb4:	4770      	bx	lr
 8003cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8003cba:	e7f9      	b.n	8003cb0 <memset+0x4>

08003cbc <__libc_init_array>:
 8003cbc:	b570      	push	{r4, r5, r6, lr}
 8003cbe:	4d0d      	ldr	r5, [pc, #52]	@ (8003cf4 <__libc_init_array+0x38>)
 8003cc0:	4c0d      	ldr	r4, [pc, #52]	@ (8003cf8 <__libc_init_array+0x3c>)
 8003cc2:	1b64      	subs	r4, r4, r5
 8003cc4:	10a4      	asrs	r4, r4, #2
 8003cc6:	2600      	movs	r6, #0
 8003cc8:	42a6      	cmp	r6, r4
 8003cca:	d109      	bne.n	8003ce0 <__libc_init_array+0x24>
 8003ccc:	4d0b      	ldr	r5, [pc, #44]	@ (8003cfc <__libc_init_array+0x40>)
 8003cce:	4c0c      	ldr	r4, [pc, #48]	@ (8003d00 <__libc_init_array+0x44>)
 8003cd0:	f000 f818 	bl	8003d04 <_init>
 8003cd4:	1b64      	subs	r4, r4, r5
 8003cd6:	10a4      	asrs	r4, r4, #2
 8003cd8:	2600      	movs	r6, #0
 8003cda:	42a6      	cmp	r6, r4
 8003cdc:	d105      	bne.n	8003cea <__libc_init_array+0x2e>
 8003cde:	bd70      	pop	{r4, r5, r6, pc}
 8003ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ce4:	4798      	blx	r3
 8003ce6:	3601      	adds	r6, #1
 8003ce8:	e7ee      	b.n	8003cc8 <__libc_init_array+0xc>
 8003cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cee:	4798      	blx	r3
 8003cf0:	3601      	adds	r6, #1
 8003cf2:	e7f2      	b.n	8003cda <__libc_init_array+0x1e>
 8003cf4:	08003d34 	.word	0x08003d34
 8003cf8:	08003d34 	.word	0x08003d34
 8003cfc:	08003d34 	.word	0x08003d34
 8003d00:	08003d38 	.word	0x08003d38

08003d04 <_init>:
 8003d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d06:	bf00      	nop
 8003d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d0a:	bc08      	pop	{r3}
 8003d0c:	469e      	mov	lr, r3
 8003d0e:	4770      	bx	lr

08003d10 <_fini>:
 8003d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d12:	bf00      	nop
 8003d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d16:	bc08      	pop	{r3}
 8003d18:	469e      	mov	lr, r3
 8003d1a:	4770      	bx	lr
